{"version":3,"sources":["../src/schemas/api.ts","../src/schemas/booking.ts","../src/schemas/helpers.ts","../src/schemas/utils.ts","../src/schemas/refs.ts","../src/constants.ts","../src/schemas/apiLogs.ts","../src/schemas/country.ts","../src/schemas/currency.ts","../src/schemas/utils/documentation.ts","../src/schemas/esim.ts","../src/schemas/message.ts","../src/schemas/package.ts","../src/schemas/partner.ts","../src/schemas/payment.ts","../src/schemas/promoCode.ts","../src/schemas/user.ts"],"sourcesContent":["import { z } from 'zod';\nimport { communicationOptionsSchema } from './booking';\n\n// Schema for package specification\nexport const packageSpecificationSchema = z.object({\n    destination: z.string().optional(),\n    size: z.string().optional(),\n    package_id: z.string().optional(),\n    iata_code: z.string().optional()\n});\n\nexport const packageSpecificationsSchema = z.array(packageSpecificationSchema);\n\n\n// ===== API TYPES FOR BOOKING =====\n// Booking API response schema\nexport const bookingApiResponseSchema = z.object({\n    id: z.string(),\n    title: z.string().nullable(),\n    first_name: z.string(),\n    last_name: z.string(),\n    full_name: z.string(),\n    pax: z.number(),\n    email: z.string().nullable(),\n    phone: z.string().nullable(),\n    booking_id: z.string().nullable(),\n    return_date: z.string().nullable(), // ISO string\n    partner: z.string(), // DocumentReference id\n    promo_codes: z.array(z.string()), // Array of DocumentReference ids\n    departure_date: z.string(), // ISO string\n    flight_number: z.string().optional(),\n    gender: z.enum([\"M\", \"F\", \"O\"]).optional(),\n    package_size: z.string().optional(),\n    sent_messages: z.record(z.any()).optional(),\n    users: z.array(z.string()), // Array of DocumentReference ids\n    esims: z.array(z.string()).nullable(), // Array of DocumentReference ids or null\n    locale: z.string(),\n    status: z.enum(['PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELLED', 'UNPAID', 'EXPIRED']),\n    data: z.object({\n        source: z.string(),\n        manual: z.boolean()\n    }),\n    communication_options: communicationOptionsSchema,\n    is_processed_for_esim_restoration: z.boolean(),\n    is_pseudonymized: z.boolean(),\n    import_id: z.string().nullable().optional(),\n    created_at: z.string(), // ISO string\n    updated_at: z.string(), // ISO string\n    created_by: z.string().optional(),\n    updated_by: z.string().optional()\n});\n\n// PromoCode API response schema\nexport const promoCodeApiResponseSchema = z.object({\n    promo_code: z.string(),\n    package_id: z.string(),\n    package_size: z.string(),\n    destination: z.string()\n});\n\n// Booking API request schema\nexport const bookingApiRequestSchema = z.object({\n    id: z.string(),\n    title: z.string().nullable(),\n    first_name: z.string().nullable().optional(),\n    last_name: z.string().nullable().optional(),\n    full_name: z.string().nullable().optional(),\n    pax: z.number().int().min(1).nullable().optional(),\n    email: z.string().nullable().optional(),\n    phone: z.string().nullable().optional(),\n    booking_id: z.string().min(3).nullable().optional(),\n    return_date: z.date().nullable(), // Must be after departure_date\n    departure_date: z.date(), // ISO 8601 date string\n    flight_number: z.string().nullable().optional(),\n    gender: z.enum([\"M\", \"F\", \"O\"]).optional(),\n    package_size: z.string().optional(),\n    sent_messages: z.record(z.any()).optional(),\n    locale: z.string().min(2).max(5).optional(),\n    status: z.enum(['PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELLED', 'UNPAID', 'EXPIRED']),\n    data: z.object({\n        source: z.string(),\n        manual: z.boolean()\n    }),\n    communication_options: communicationOptionsSchema,\n    is_processed_for_esim_restoration: z.boolean(),\n    is_pseudonymized: z.boolean(),\n    date_of_birth: z.date().optional(),\n    package_specifications: packageSpecificationsSchema,\n    created_at: z.date(),\n    updated_at: z.date()\n});\n\n// ===== API TYPES FOR PARTNER =====\n// Partner API request schema\nexport const partnerApiRequestSchema = z.object({\n    id: z.string(),\n    name: z.string().nullable(),\n    type: z.string().nullable(),\n    is_active: z.boolean().nullable().optional(),\n    external_id: z.string().nullable().optional(),\n    parent: z.string().nullable(), // Previously DocumentReference\n    contact: z.object({\n        email: z.string().nullable(),\n        office_phone: z.string().nullable().optional()\n    }).nullable(),\n    address: z.object({\n        street: z.string().optional(),\n        city: z.string().optional(),\n        postal_code: z.string().optional(),\n        country: z.string().optional()\n    }).nullable().optional(),\n    registration: z.object({\n        chamber_of_commerce_number: z.string().nullable().optional(),\n        vat_number: z.string().nullable().optional(),\n        anvr_number: z.number().nullable().optional(),\n        tax_number: z.string().nullable().optional()\n    }).nullable().optional(),\n    banking_details: z.object({\n        account_holder: z.string(),\n        bank_name: z.string(),\n        iban: z.string()\n    }).nullable().optional(),\n    finance: z.object({\n        administration_fee: z.number().nullable(),\n        income_per_gb: z.number().nullable(),\n        commission_fee: z.number().optional(),\n        payment_method: z.enum([\"invoice\", \"direct\"]),\n        requires_card: z.boolean().nullable(),\n        next_invoice: z.date().nullable(), // Previously Timestamp\n        last_invoice: z.date().nullable(), // Previously Timestamp\n        pricing_strategies: z.object({\n            partner: z.object({\n                strategy: z.enum([\"split\", \"bundle\"]),\n                default_price_list: z.string().nullable(),\n                custom_prices: z.array(z.any()),\n                modification_percentage: z.number()\n            }),\n            user: z.object({\n                default_price_list: z.string().nullable(),\n                custom_prices: z.array(z.any()),\n                modification_percentage: z.number()\n            })\n        }).optional()\n    }).nullable(),\n    platform_settings: z.any().optional(),\n    visual_identity: z.any().nullable(),\n    users: z.array(z.string()).nullable(), // Previously DocumentReference[]\n    data: z.object({\n        source: z.string(),\n        manual: z.boolean()\n    }).optional(),\n    created_at: z.date(),\n    updated_at: z.date(),\n    created_by: z.string().nullable(),\n    updated_by: z.string().nullable()\n});\n\nexport const partnerApiResponseSchema = partnerApiRequestSchema;\n\n// Define types based on schemas\nexport type PackageSpecification = z.infer<typeof packageSpecificationSchema>;\nexport type PackageSpecifications = z.infer<typeof packageSpecificationsSchema>;\nexport type BookingApiRequest = z.infer<typeof bookingApiRequestSchema>;\nexport type BookingApiResponse = z.infer<typeof bookingApiResponseSchema>;\nexport type PromoCodeApiResponse = z.infer<typeof promoCodeApiResponseSchema>;\nexport type PartnerApiRequest = z.infer<typeof partnerApiRequestSchema>;\nexport type PartnerApiResponse = z.infer<typeof partnerApiResponseSchema>; ","import { z } from 'zod';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    timestampSchema,\n    docRefToStringSchema,\n    fromFirestore,\n    toFirestore\n} from './helpers';\nimport {\n    GenericRefFieldMapping,\n    GenericDateFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\nimport {\n    PARTNER_COLLECTION,\n    PROMO_CODE_COLLECTION,\n    USER_COLLECTION,\n    ESIM_COLLECTION\n} from './utils/collections';\nimport { SupportedLocales, SUPPORTED_LOCALES, supportedLocalesSchema } from '../constants';\nimport { DocumentReference, DocumentData, Timestamp } from 'firebase/firestore';\nimport { \n    partnerRefSchema, \n    promoCodeRefArray, \n    userRefArrayNullable, \n    esimRefArrayNullable,\n    partnerRefString,\n    promoCodeRefStringArray,\n    userRefStringArrayNullable,\n    esimRefStringArrayNullable\n} from './refs';\n\n// Enum for communication channels\nexport const communicationChannelSchema = z.enum([\n    'EMAIL',\n    'WHATSAPP',\n    'PUSH_NOTIFICATION',\n    'SMS'\n]);\nexport type CommunicationChannelType = z.infer<typeof communicationChannelSchema>;\n\n// For backward compatibility\nexport type CommunicationChannel = CommunicationChannelType;\n\n// Add enum-like object for use in code\nexport const CommunicationChannel = {\n    EMAIL: 'EMAIL' as const,\n    WHATSAPP: 'WHATSAPP' as const,\n    PUSH_NOTIFICATION: 'PUSH_NOTIFICATION' as const,\n    SMS: 'SMS' as const\n} as const;\n\n// Schema for communication options\nexport const communicationOptionsSchema = z.object({\n    should_send_message: z.boolean(),\n    channels: z.array(communicationChannelSchema)\n});\n\n// Status type for bookings\nexport const bookingStatusSchema = z.enum([\n    'PENDING',\n    'CONFIRMED',\n    'COMPLETED',\n    'CANCELLED',\n    'UNPAID',\n    'EXPIRED'\n]);\nexport type BookingStatus = z.infer<typeof bookingStatusSchema>;\n\n// Common booking fields shared between Firestore and App schemas\nconst commonBookingFields = {\n    title: z.string().nullable(),\n    first_name: z.string(),\n    last_name: z.string(),\n    full_name: z.string(),\n    pax: z.number(),\n    email: z.string().email().nullable(),\n    phone: z.string().nullable(),\n    booking_id: z.string().nullable(),\n    flight_number: z.string().optional(),\n    gender: z.enum(['M', 'F', 'O']).optional(),\n    package_size: z.string().optional(),\n    sent_messages: z.record(z.any()).optional(),\n    locale: supportedLocalesSchema,\n    status: bookingStatusSchema,\n    data: z.object({\n        source: z.string(),\n        manual: z.boolean()\n    }),\n    communication_options: communicationOptionsSchema,\n    is_processed_for_esim_restoration: z.boolean(),\n    is_pseudonymized: z.boolean(),\n    import_id: z.string().nullable().optional(),\n    package_specifications: z.record(z.any()).optional()\n};\n\n// Firestore schema for Booking\nexport const bookingFirestoreSchema = baseModelSchema.extend({\n    ...commonBookingFields,\n    return_date: timestampSchema.nullable(),\n    departure_date: timestampSchema,\n    partner: partnerRefSchema.schema,\n    promo_codes: promoCodeRefArray,\n    users: userRefArrayNullable,\n    esims: esimRefArrayNullable,\n});\n\n// App schema for Booking\nexport const bookingAppSchema = baseModelAppSchema.extend({\n    ...commonBookingFields,\n    return_date: z.date().nullable(),\n    departure_date: z.date(),\n    partner: partnerRefString,\n    promo_codes: promoCodeRefStringArray,\n    users: userRefStringArrayNullable,\n    esims: esimRefStringArrayNullable,\n});\n\n// Define types based on schemas\nexport type BookingFirestore = z.infer<typeof bookingFirestoreSchema>;\nexport type BookingApp = z.infer<typeof bookingAppSchema>;\nexport type CommunicationOptions = z.infer<typeof communicationOptionsSchema>;\n\n// Field mapping types for conversions\nconst refFieldMappings: GenericRefFieldMapping<BookingApp, BookingFirestore>[] = [\n    { app: 'partner', firestore: 'partner', collection: PARTNER_COLLECTION },\n    { app: 'promo_codes', firestore: 'promo_codes', collection: PROMO_CODE_COLLECTION, isArray: true },\n    { app: 'users', firestore: 'users', collection: USER_COLLECTION, isArray: true, nullable: true },\n    { app: 'esims', firestore: 'esims', collection: ESIM_COLLECTION, isArray: true, nullable: true }\n];\n\nconst dateFieldMappings: GenericDateFieldMapping<BookingApp, BookingFirestore>[] = [\n    { field: 'return_date', nullable: true },\n    { field: 'departure_date' }\n];\n\n// Conversion functions\nexport const bookingToFirestore = (booking: BookingApp): BookingFirestore => {\n    return genericToFirestore({\n        appObject: booking,\n        refFieldMappings,\n        dateFieldMappings\n    });\n};\n\nexport const bookingFromFirestore = (firestoreBooking: BookingFirestore): BookingApp => {\n    return genericFromFirestore({\n        firestoreObject: firestoreBooking,\n        refFieldMappings,\n        dateFieldMappings\n    });\n};\n\n// For backwards compatibility\nexport type Booking = BookingFirestore;\nexport type HBooking = BookingApp; ","import { z } from 'zod';\nimport { Timestamp, DocumentReference, FieldValue } from 'firebase/firestore';\n\n// Flag to indicate if we're running in a test environment\n// Export as object to make it mutable in ESM context\nexport const testEnv = { isTestEnvironment: false };\n\n// Test environment document references for mocking\nexport class MockDocumentReference {\n    path: string;\n    id: string;\n\n    constructor(collectionPath: string, id: string) {\n        this.path = `${collectionPath}/${id}`;\n        this.id = id;\n    }\n}\n\n// Firebase type schemas with custom type guards instead of z.instanceof\nexport const timestampSchema = z.custom<Timestamp>(\n    (val): val is Timestamp => val instanceof Timestamp\n);\n\nexport const documentRefSchema = z.custom<DocumentReference>(\n    (val): val is DocumentReference =>\n        typeof val === 'object' &&\n        val !== null &&\n        'path' in val &&\n        'id' in val\n);\n\nexport const fieldValueSchema = z.custom<FieldValue>(\n    (val): val is FieldValue =>\n        typeof val === 'object' &&\n        val !== null &&\n        'isEqual' in val\n);\n\n// Conversion helpers\nexport const toFirestore = {\n    date: (date: Date): Timestamp => Timestamp.fromDate(date),\n    ref: <T>(collectionPath: string, id: string): DocumentReference<T> => {\n        // For tests, return a mock document reference\n        if (testEnv.isTestEnvironment) {\n            return new MockDocumentReference(collectionPath, id) as any;\n        }\n\n        // In a real environment, this requires a Firestore instance\n        throw new Error('Implementation requires Firestore instance');\n    }\n};\n\nexport const fromFirestore = {\n    date: (timestamp: Timestamp): Date => timestamp.toDate(),\n    ref: <T>(docRef: DocumentReference<T> | MockDocumentReference): string => {\n        if (docRef instanceof MockDocumentReference) {\n            return docRef.id;\n        }\n        return (docRef as any).id;\n    }\n};\n\n// Base model schema for common fields\nexport const baseModelSchema = z.object({\n    id: z.string(),\n    created_at: timestampSchema,\n    updated_at: timestampSchema,\n    created_by: z.union([z.string(), z.null(), documentRefSchema]),\n    updated_by: z.union([z.string(), z.null(), documentRefSchema])\n});\n\n// App version of the base model\nexport const baseModelAppSchema = z.object({\n    id: z.string(),\n    created_at: z.date(),\n    updated_at: z.date(),\n    created_by: z.union([z.string(), z.null()]),\n    updated_by: z.union([z.string(), z.null()])\n});\n\n// Define HubbyModel schemas explicitly\nexport const hubbyModelFirestoreSchema = baseModelSchema;\nexport const hubbyModelAppSchema = baseModelAppSchema;\n\n// Type for the base model\nexport type HubbyModelFirestore = z.infer<typeof hubbyModelFirestoreSchema>;\nexport type HubbyModelApp = z.infer<typeof hubbyModelAppSchema>;\n\n// For backwards compatibility\nexport type HubbyModel = HubbyModelFirestore;\nexport type HHubbyModel = HubbyModelApp;\n\n// Helper function to create document reference schemas\nexport const createDocRefSchema = <T>(collectionPath: string) => {\n    const schema = documentRefSchema.refine(\n        (ref) => ref.path.startsWith(collectionPath),\n        {\n            message: `Document reference must be from collection ${collectionPath}`\n        }\n    );\n\n    return {\n        schema,\n        collectionPath\n    };\n};\n\n// Helper function to convert a document reference schema to a string schema\nexport const docRefToStringSchema = <T>(docRefSchema: ReturnType<typeof createDocRefSchema<T>>) => {\n    return z.string().describe(`ID from ${docRefSchema.collectionPath}`);\n};","import { toFirestore, fromFirestore } from './helpers';\n\n// Generic interfaces for field mappings\nexport interface GenericRefFieldMapping<AppType, FirestoreType> {\n    app: keyof AppType;\n    firestore: keyof FirestoreType;\n    collection: string;\n    nullable?: boolean;\n    isArray?: boolean;\n}\n\nexport interface GenericDateFieldMapping<AppType, FirestoreType> {\n    field: keyof FirestoreType & keyof AppType;\n    nullable?: boolean;\n}\n\n// Helper function to convert date-like values to Date\nexport const convertToDate = (value: any): Date => {\n    if (value && typeof value === 'object' && 'getTime' in value) {\n        return value as Date;\n    }\n    if (typeof value === 'string') {\n        return new Date(value);\n    }\n    if (value && typeof value === 'object' && typeof value.toDate === 'function') {\n        return value.toDate();\n    }\n    throw new Error(`Unable to convert value to Date: ${value}`);\n};\n\nexport const isDate = (value: any): value is Date => {\n    return value && typeof value === 'object' && 'getTime' in value;\n};\n\n// Generic toFirestore conversion function\nexport function genericToFirestore<AppType extends Record<string, any>, FirestoreType extends Record<string, any>>({\n    appObject,\n    refFieldMappings,\n    dateFieldMappings,\n    specialCaseHandler\n}: {\n    appObject: AppType;\n    refFieldMappings: GenericRefFieldMapping<AppType, FirestoreType>[];\n    dateFieldMappings: GenericDateFieldMapping<AppType, FirestoreType>[];\n    specialCaseHandler?: (result: Record<string, any>, appData: AppType) => void;\n}): FirestoreType {\n    // Create base object with common fields but exclude reference fields\n    const result: Record<string, any> = {};\n    \n    // Copy all fields except references that will be handled separately\n    const refFieldNames = refFieldMappings.map(mapping => mapping.app);\n    Object.keys(appObject as Record<string, any>).forEach(key => {\n        if (!refFieldNames.includes(key as keyof AppType)) {\n            result[key] = appObject[key as keyof AppType];\n        }\n    });\n\n    // Handle base model fields\n    if ('created_at' in appObject && isDate(appObject.created_at)) {\n        result.created_at = toFirestore.date(appObject.created_at);\n    }\n    \n    if ('updated_at' in appObject && isDate(appObject.updated_at)) {\n        result.updated_at = toFirestore.date(appObject.updated_at);\n    }\n    \n    if ('created_by' in appObject) {\n        result.created_by = typeof appObject.created_by === 'string' ? appObject.created_by : null;\n    }\n    \n    if ('updated_by' in appObject) {\n        result.updated_by = typeof appObject.updated_by === 'string' ? appObject.updated_by : null;\n    }\n\n    // Convert date fields\n    dateFieldMappings.forEach(({ field, nullable }) => {\n        const value = appObject[field];\n        if (nullable && value === null) {\n            result[field as string] = null;\n        } else if (isDate(value)) {\n            result[field as string] = toFirestore.date(value);\n        }\n    });\n\n    // Convert reference fields\n    refFieldMappings.forEach(({ app, firestore, collection, isArray, nullable }) => {\n        const value = appObject[app];\n\n        if (isArray) {\n            if (nullable && value === null) {\n                result[firestore as string] = null;\n            } else if (Array.isArray(value)) {\n                result[firestore as string] = value.map((id: string) => toFirestore.ref<any>(collection, id));\n            }\n        } else {\n            if (nullable && value === null) {\n                result[firestore as string] = null;\n            } else if (typeof value === 'string') {\n                result[firestore as string] = toFirestore.ref<any>(collection, value);\n            }\n        }\n    });\n    \n    // Apply any special case handling\n    if (specialCaseHandler) {\n        specialCaseHandler(result, appObject);\n    }\n\n    return result as unknown as FirestoreType;\n}\n\n// Generic fromFirestore conversion function\nexport function genericFromFirestore<FirestoreType extends Record<string, any>, AppType extends Record<string, any>>({\n    firestoreObject,\n    refFieldMappings,\n    dateFieldMappings,\n    specialCaseHandler\n}: {\n    firestoreObject: FirestoreType;\n    refFieldMappings: GenericRefFieldMapping<AppType, FirestoreType>[];\n    dateFieldMappings: GenericDateFieldMapping<AppType, FirestoreType>[];\n    specialCaseHandler?: (result: Record<string, any>, firestoreData: FirestoreType) => void;\n}): AppType {\n    // Create base object excluding reference fields that will be handled separately\n    const result: Record<string, any> = {};\n    \n    // Copy all fields except references that will be handled separately\n    const refFieldNames = refFieldMappings.map(mapping => mapping.firestore);\n    Object.keys(firestoreObject as Record<string, any>).forEach(key => {\n        if (!refFieldNames.includes(key as keyof FirestoreType)) {\n            result[key] = firestoreObject[key as keyof FirestoreType];\n        }\n    });\n\n    // Handle base model fields\n    if ('created_at' in firestoreObject) {\n        result.created_at = fromFirestore.date(firestoreObject.created_at as any);\n    }\n    \n    if ('updated_at' in firestoreObject) {\n        result.updated_at = fromFirestore.date(firestoreObject.updated_at as any);\n    }\n    \n    if ('created_by' in firestoreObject) {\n        const createdBy = firestoreObject.created_by;\n        result.created_by = typeof createdBy === 'string'\n            ? createdBy\n            : createdBy ? fromFirestore.ref(createdBy as any) : null;\n    }\n    \n    if ('updated_by' in firestoreObject) {\n        const updatedBy = firestoreObject.updated_by;\n        result.updated_by = typeof updatedBy === 'string'\n            ? updatedBy\n            : updatedBy ? fromFirestore.ref(updatedBy as any) : null;\n    }\n\n    // Convert date fields\n    dateFieldMappings.forEach(({ field, nullable }) => {\n        const value = firestoreObject[field];\n        if (nullable && value === null) {\n            result[field as string] = null;\n        } else {\n            result[field as string] = convertToDate(value);\n        }\n    });\n\n    // Convert reference fields\n    refFieldMappings.forEach(({ app, firestore, nullable, isArray }) => {\n        const value = firestoreObject[firestore];\n\n        if (isArray) {\n            if (nullable && value === null) {\n                result[app as string] = null;\n            } else if (Array.isArray(value)) {\n                result[app as string] = value.map((ref: any) => fromFirestore.ref(ref));\n            }\n        } else {\n            if (nullable && value === null) {\n                result[app as string] = null;\n            } else if (value) {\n                result[app as string] = fromFirestore.ref(value as any);\n            }\n        }\n    });\n    \n    // Apply any special case handling\n    if (specialCaseHandler) {\n        specialCaseHandler(result, firestoreObject);\n    }\n\n    return result as unknown as AppType;\n} ","import { z } from 'zod';\nimport { createDocRefSchema, docRefToStringSchema } from './helpers';\n\n// Collection paths\nexport const PARTNER_COLLECTION = 'partners';\nexport const USER_COLLECTION = 'users';\nexport const PROFILE_COLLECTION = 'profiles';\nexport const PACKAGE_COLLECTION = 'packages';\nexport const PROMO_CODE_COLLECTION = 'promo_codes';\nexport const COUNTRY_COLLECTION = 'countries';\nexport const ESIM_COLLECTION = 'esims';\nexport const PAYMENT_COLLECTION = 'payments';\nexport const PRICE_LIST_COLLECTION = 'price_lists';\nexport const BOOKING_COLLECTION = 'bookings';\nexport const MESSAGE_COLLECTION = 'messages';\nexport const CURRENCY_COLLECTION = 'currencies';\nexport const API_LOG_COLLECTION = 'api_logs';\n\n// Centralized ref schemas\nexport const partnerRefSchema = createDocRefSchema<any>(PARTNER_COLLECTION);\nexport const userRefSchema = createDocRefSchema<any>(USER_COLLECTION);\nexport const profileRefSchema = createDocRefSchema<any>(PROFILE_COLLECTION);\nexport const packageRefSchema = createDocRefSchema<any>(PACKAGE_COLLECTION);\nexport const promoCodeRefSchema = createDocRefSchema<any>(PROMO_CODE_COLLECTION);\nexport const countryRefSchema = createDocRefSchema<any>(COUNTRY_COLLECTION);\nexport const esimRefSchema = createDocRefSchema<any>(ESIM_COLLECTION);\nexport const paymentRefSchema = createDocRefSchema<any>(PAYMENT_COLLECTION);\nexport const priceListRefSchema = createDocRefSchema<any>(PRICE_LIST_COLLECTION);\nexport const bookingRefSchema = createDocRefSchema<any>(BOOKING_COLLECTION);\nexport const messageRefSchema = createDocRefSchema<any>(MESSAGE_COLLECTION);\nexport const currencyRefSchema = createDocRefSchema<any>(CURRENCY_COLLECTION);\nexport const apiLogRefSchema = createDocRefSchema<any>(API_LOG_COLLECTION);\n\n// Export nullable versions\nexport const partnerRefNullable = partnerRefSchema.schema.nullable();\nexport const userRefNullable = userRefSchema.schema.nullable();\nexport const profileRefNullable = profileRefSchema.schema.nullable();\nexport const packageRefNullable = packageRefSchema.schema.nullable();\nexport const promoCodeRefNullable = promoCodeRefSchema.schema.nullable();\nexport const countryRefNullable = countryRefSchema.schema.nullable();\nexport const esimRefNullable = esimRefSchema.schema.nullable();\nexport const paymentRefNullable = paymentRefSchema.schema.nullable();\nexport const priceListRefNullable = priceListRefSchema.schema.nullable();\nexport const bookingRefNullable = bookingRefSchema.schema.nullable();\nexport const messageRefNullable = messageRefSchema.schema.nullable();\nexport const currencyRefNullable = currencyRefSchema.schema.nullable();\nexport const apiLogRefNullable = apiLogRefSchema.schema.nullable();\n\n// Export string versions (for app schemas)\nexport const partnerRefString = docRefToStringSchema(partnerRefSchema);\nexport const userRefString = docRefToStringSchema(userRefSchema);\nexport const profileRefString = docRefToStringSchema(profileRefSchema);\nexport const packageRefString = docRefToStringSchema(packageRefSchema);\nexport const promoCodeRefString = docRefToStringSchema(promoCodeRefSchema);\nexport const countryRefString = docRefToStringSchema(countryRefSchema);\nexport const esimRefString = docRefToStringSchema(esimRefSchema);\nexport const paymentRefString = docRefToStringSchema(paymentRefSchema);\nexport const priceListRefString = docRefToStringSchema(priceListRefSchema);\nexport const bookingRefString = docRefToStringSchema(bookingRefSchema);\nexport const messageRefString = docRefToStringSchema(messageRefSchema);\nexport const currencyRefString = docRefToStringSchema(currencyRefSchema);\nexport const apiLogRefString = docRefToStringSchema(apiLogRefSchema);\n\n// Export nullable string versions\nexport const partnerRefStringNullable = partnerRefString.nullable();\nexport const userRefStringNullable = userRefString.nullable();\nexport const profileRefStringNullable = profileRefString.nullable();\nexport const packageRefStringNullable = packageRefString.nullable();\nexport const promoCodeRefStringNullable = promoCodeRefString.nullable();\nexport const countryRefStringNullable = countryRefString.nullable();\nexport const esimRefStringNullable = esimRefString.nullable();\nexport const paymentRefStringNullable = paymentRefString.nullable();\nexport const priceListRefStringNullable = priceListRefString.nullable();\nexport const bookingRefStringNullable = bookingRefString.nullable();\nexport const messageRefStringNullable = messageRefString.nullable();\nexport const currencyRefStringNullable = currencyRefString.nullable();\nexport const apiLogRefStringNullable = apiLogRefString.nullable();\n\n// Export array versions\nexport const partnerRefArray = z.array(partnerRefSchema.schema);\nexport const userRefArray = z.array(userRefSchema.schema);\nexport const profileRefArray = z.array(profileRefSchema.schema);\nexport const packageRefArray = z.array(packageRefSchema.schema);\nexport const promoCodeRefArray = z.array(promoCodeRefSchema.schema);\nexport const countryRefArray = z.array(countryRefSchema.schema);\nexport const esimRefArray = z.array(esimRefSchema.schema);\nexport const paymentRefArray = z.array(paymentRefSchema.schema);\nexport const priceListRefArray = z.array(priceListRefSchema.schema);\nexport const bookingRefArray = z.array(bookingRefSchema.schema);\nexport const messageRefArray = z.array(messageRefSchema.schema);\nexport const currencyRefArray = z.array(currencyRefSchema.schema);\nexport const apiLogRefArray = z.array(apiLogRefSchema.schema);\n\n// Export nullable array versions\nexport const partnerRefArrayNullable = partnerRefArray.nullable();\nexport const userRefArrayNullable = userRefArray.nullable();\nexport const profileRefArrayNullable = profileRefArray.nullable();\nexport const packageRefArrayNullable = packageRefArray.nullable();\nexport const promoCodeRefArrayNullable = promoCodeRefArray.nullable();\nexport const countryRefArrayNullable = countryRefArray.nullable();\nexport const esimRefArrayNullable = esimRefArray.nullable();\nexport const paymentRefArrayNullable = paymentRefArray.nullable();\nexport const priceListRefArrayNullable = priceListRefArray.nullable();\nexport const bookingRefArrayNullable = bookingRefArray.nullable();\nexport const messageRefArrayNullable = messageRefArray.nullable();\nexport const currencyRefArrayNullable = currencyRefArray.nullable();\nexport const apiLogRefArrayNullable = apiLogRefArray.nullable();\n\n// Export string array versions\nexport const partnerRefStringArray = z.array(z.string());\nexport const userRefStringArray = z.array(z.string());\nexport const profileRefStringArray = z.array(z.string());\nexport const packageRefStringArray = z.array(z.string());\nexport const promoCodeRefStringArray = z.array(z.string());\nexport const countryRefStringArray = z.array(z.string());\nexport const esimRefStringArray = z.array(z.string());\nexport const paymentRefStringArray = z.array(z.string());\nexport const priceListRefStringArray = z.array(z.string());\nexport const bookingRefStringArray = z.array(z.string());\nexport const messageRefStringArray = z.array(z.string());\nexport const currencyRefStringArray = z.array(z.string());\nexport const apiLogRefStringArray = z.array(z.string());\n\n// Export nullable string array versions\nexport const partnerRefStringArrayNullable = partnerRefStringArray.nullable();\nexport const userRefStringArrayNullable = userRefStringArray.nullable();\nexport const profileRefStringArrayNullable = profileRefStringArray.nullable();\nexport const packageRefStringArrayNullable = packageRefStringArray.nullable();\nexport const promoCodeRefStringArrayNullable = promoCodeRefStringArray.nullable();\nexport const countryRefStringArrayNullable = countryRefStringArray.nullable();\nexport const esimRefStringArrayNullable = esimRefStringArray.nullable();\nexport const paymentRefStringArrayNullable = paymentRefStringArray.nullable();\nexport const priceListRefStringArrayNullable = priceListRefStringArray.nullable();\nexport const bookingRefStringArrayNullable = bookingRefStringArray.nullable();\nexport const messageRefStringArrayNullable = messageRefStringArray.nullable();\nexport const currencyRefStringArrayNullable = currencyRefStringArray.nullable();\nexport const apiLogRefStringArrayNullable = apiLogRefStringArray.nullable(); ","import { z } from 'zod';\n\nexport const SUPPORTED_LOCALES = [\n    'en-US',\n    'en-GB',\n    'nl-NL',\n    'de-DE',\n    'fr-FR',\n    'it-IT',\n    'es-ES',\n    'cs-CZ',\n    'pl-PL',\n    'pt-PT',\n    'fr-BE',\n    'nl-BE',\n    'de-AT',\n    'de-CH',\n    'fr-CH',\n    'it-CH',\n    'de-BE'\n] as const;\n\n// Define the type using TypeScript's typeof and indexing\nexport type SupportedLocales = typeof SUPPORTED_LOCALES[number];\n\n// Create a Zod schema for validation\nexport const supportedLocalesSchema = z.enum(SUPPORTED_LOCALES);\n\n// Type inference from the schema (alternative way to define the type)\nexport type SupportedLocalesFromSchema = z.infer<typeof supportedLocalesSchema>; ","import { z } from 'zod';\nimport {\n    timestampSchema,\n    fromFirestore,\n    toFirestore\n} from './helpers';\nimport {\n    GenericDateFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\n\n// Firestore schema for ApiLog\nexport const apiLogFirestoreSchema = z.object({\n    id: z.string().optional(),\n    method: z.string(),\n    user_id: z.string().optional(),\n    path: z.string(),\n    resource_type: z.string().optional(),\n    resource_id: z.string().optional(),\n    partner_id: z.string().optional(),\n    payload: z.record(z.unknown()).optional(),\n    timestamp: timestampSchema,\n    status_code: z.number()\n});\n\n// App schema for ApiLog\nexport const apiLogAppSchema = z.object({\n    id: z.string().optional(),\n    method: z.string(),\n    user_id: z.string().optional(),\n    path: z.string(),\n    resource_type: z.string().optional(),\n    resource_id: z.string().optional(),\n    partner_id: z.string().optional(),\n    payload: z.record(z.unknown()).optional(),\n    timestamp: z.date(),\n    status_code: z.number()\n});\n\n// Define types based on schemas\nexport type ApiLogFirestore = z.infer<typeof apiLogFirestoreSchema>;\nexport type ApiLogApp = z.infer<typeof apiLogAppSchema>;\n\n// Define date field mappings\nconst dateFieldMappings: GenericDateFieldMapping<ApiLogApp, ApiLogFirestore>[] = [\n    { field: 'timestamp' }\n];\n\n// Conversion functions\nexport const apiLogToFirestore = (apiLog: ApiLogApp): ApiLogFirestore => {\n    return genericToFirestore({\n        appObject: apiLog,\n        refFieldMappings: [],\n        dateFieldMappings\n    });\n};\n\nexport const apiLogFromFirestore = (firestoreApiLog: ApiLogFirestore): ApiLogApp => {\n    return genericFromFirestore({\n        firestoreObject: firestoreApiLog,\n        refFieldMappings: [],\n        dateFieldMappings\n    });\n};\n\n// For backwards compatibility\nexport type ApiLog = ApiLogFirestore;\nexport type HApiLog = ApiLogApp; ","import { z } from 'zod';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    fromFirestore,\n    toFirestore\n} from './helpers';\nimport {\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\n\n// Country Firestore schema - no transformations needed as it doesn't \n// contain Firestore-specific types\nexport const countryFirestoreSchema = z.object({\n    id: z.string().nullable(),\n    bokun_id: z.number().nullable(),\n    LTE: z.boolean().nullable(),\n    apn: z.string().nullable(),\n    click_count: z.number().nullable(),\n    global_network: z.string().nullable(),\n    global_price: z.number().nullable(),\n    hubby: z.number().nullable(),\n    imsi: z.number().nullable(),\n    name: z.string().nullable(),\n    region: z.boolean().nullable(),\n    is_region: z.boolean().nullable(),\n    countries: z.array(z.string()).nullable(),\n    tier: z.number().nullable()\n});\n\n// For Country, the app schema is identical to the Firestore schema\n// since there are no Firestore-specific types to convert\nexport const countryAppSchema = countryFirestoreSchema;\n\n// Define types based on schemas\nexport type CountryFirestore = z.infer<typeof countryFirestoreSchema>;\nexport type CountryApp = z.infer<typeof countryAppSchema>;\n\n// Conversion functions using generic utilities for consistency\nexport const countryToFirestore = (country: CountryApp): CountryFirestore => {\n    return genericToFirestore({\n        appObject: country,\n        refFieldMappings: [],\n        dateFieldMappings: []\n    });\n};\n\nexport const countryFromFirestore = (firestoreCountry: CountryFirestore): CountryApp => {\n    return genericFromFirestore({\n        firestoreObject: firestoreCountry,\n        refFieldMappings: [],\n        dateFieldMappings: []\n    });\n};\n\n// For backwards compatibility\nexport type Country = CountryFirestore;\nexport type HCountry = CountryApp; ","import { z } from 'zod';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    timestampSchema,\n    fromFirestore,\n    toFirestore\n} from './helpers';\nimport {\n    GenericDateFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\nimport { documentedObject } from './utils/documentation';\n\n// Define schema for conversion rates (for backward compatibility)\nexport const conversionRateSchema = z.object({\n    currency: z.number()\n});\n\nexport type CoversionRate = z.infer<typeof conversionRateSchema>;\n\n// Define documentation for the schema fields\nconst currencyFieldDocs = {\n    code: 'ISO 4217 currency code (e.g., \"USD\", \"EUR\")',\n    symbol: 'Currency symbol (e.g., \"$\", \"€\")',\n    name: 'Full name of the currency (e.g., \"US Dollar\")',\n    rate: 'Exchange rate relative to base currency',\n    is_default: 'Whether this is the default currency'\n};\n\n// Common currency fields shared between Firestore and App schemas\nconst commonCurrencyFields = {\n    code: z.string(),\n    symbol: z.string(),\n    name: z.string(),\n    rate: z.number(),\n    is_default: z.boolean()\n};\n\n// Firestore schema for Currency\nexport const currencyFirestoreSchema = documentedObject(\n    baseModelSchema.extend({\n        ...commonCurrencyFields\n    }),\n    currencyFieldDocs\n);\n\n// App schema for Currency\nexport const currencyAppSchema = documentedObject(\n    baseModelAppSchema.extend({\n        ...commonCurrencyFields\n    }),\n    currencyFieldDocs\n);\n\n// Define types based on schemas\nexport type CurrencyFirestore = z.infer<typeof currencyFirestoreSchema>;\nexport type CurrencyApp = z.infer<typeof currencyAppSchema>;\n\n// Field mappings for date conversions\nconst dateFieldMappings: GenericDateFieldMapping<CurrencyApp, CurrencyFirestore>[] = [];\n\n// Conversion functions\nexport const currencyToFirestore = (currency: CurrencyApp): CurrencyFirestore => {\n    return genericToFirestore({\n        appObject: currency,\n        refFieldMappings: [],\n        dateFieldMappings\n    });\n};\n\nexport const currencyFromFirestore = (firestoreCurrency: CurrencyFirestore): CurrencyApp => {\n    return genericFromFirestore({\n        firestoreObject: firestoreCurrency,\n        refFieldMappings: [],\n        dateFieldMappings\n    });\n};\n\n// For backwards compatibility\nexport type Currency = CurrencyFirestore;\nexport type HCurrency = CurrencyApp; ","import { z } from 'zod';\n\n/**\n * Adds documentation to a Zod schema using JSDoc-style comments\n * This makes schema fields self-documenting when users hover over them in their IDE\n * \n * @param schema The Zod schema to document\n * @param description Documentation string that will appear in IDE tooltips\n * @returns The same schema with documentation attached\n */\nexport function documented<T extends z.ZodTypeAny>(\n  schema: T,\n  description: string\n): T {\n  return schema.describe(description) as T;\n}\n\n/**\n * Creates a documented object schema by adding JSDoc comments to each field\n * \n * @param schema The object schema to document\n * @param fieldDocs Record of field names to their documentation strings\n * @returns The same schema with field documentation attached\n */\nexport function documentedObject<T extends z.ZodObject<any>>(\n  schema: T,\n  fieldDocs: Record<string, string>\n): T {\n  type Shape = z.ZodRawShape;\n  \n  // Get the original shape of the schema\n  const shape = schema.shape as Shape;\n  \n  // Create a new shape with documented fields\n  const documentedShape = { ...shape };\n  \n  for (const [key, value] of Object.entries(shape)) {\n    if (key in fieldDocs && fieldDocs[key]) {\n      documentedShape[key] = documented(value as z.ZodTypeAny, fieldDocs[key]);\n    }\n  }\n  \n  // Return a new schema with the documented shape\n  return schema.extend(documentedShape) as T;\n} ","import { z } from 'zod';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    timestampSchema,\n    docRefToStringSchema,\n    fromFirestore,\n    toFirestore\n} from './helpers';\nimport {\n    GenericRefFieldMapping,\n    GenericDateFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\nimport {\n    COUNTRY_COLLECTION,\n    USER_COLLECTION,\n    PARTNER_COLLECTION,\n    PAYMENT_COLLECTION\n} from './utils/collections';\nimport {\n    countryRefNullable,\n    userRefNullable,\n    partnerRefNullable,\n    paymentRefNullable\n} from './refs';\n\n// Common fields shared between Firestore and App schemas\nconst commonESIMFields = {\n    imsi: z.number(),\n    qr: z.string(),\n    iccid: z.string(),\n    provider: z.string(),\n    coverage_label: z.string().nullable().optional(),\n    total_data: z.number().nullable(),\n    data_left: z.number().nullable(),\n    data_used: z.boolean().nullable(),\n    status: z.string().nullable(),\n    name: z.string(),\n    android_auto: z.boolean(),\n    partner_price: z.number().nullable(),\n    promo: z.string().nullable(),\n    type: z.enum(['api', 'promo', 'balance', 'code', 'external', 'payment']),\n    is_auto_install: z.boolean(),\n    is_archived: z.boolean(),\n    user: z.string().nullable(),\n    payment: z.string().nullable(),\n    apn: z.string().nullable()\n};\n\n// Firestore schema for ESIM\nexport const esimFirestoreSchema = baseModelSchema.extend({\n    ...commonESIMFields,\n    country: countryRefNullable,\n    time_assigned: timestampSchema.nullable(),\n    last_updated: timestampSchema.nullable(),\n    partner: partnerRefNullable,\n});\n\n// App schema for ESIM\nexport const esimAppSchema = baseModelAppSchema.extend({\n    ...commonESIMFields,\n    country: z.string().nullable(),\n    time_assigned: z.date().nullable(),\n    last_updated: z.date().nullable(),\n    partner: z.string().nullable(),\n});\n\n// Define types based on schemas\nexport type ESIMFirestore = z.infer<typeof esimFirestoreSchema>;\nexport type ESIMApp = z.infer<typeof esimAppSchema>;\n\n// Field mapping for conversions\nconst refFieldMappings: GenericRefFieldMapping<ESIMApp, ESIMFirestore>[] = [\n    { app: 'country', firestore: 'country', collection: COUNTRY_COLLECTION, nullable: true },\n    { app: 'user', firestore: 'user', collection: USER_COLLECTION, nullable: true },\n    { app: 'partner', firestore: 'partner', collection: PARTNER_COLLECTION, nullable: true },\n    { app: 'payment', firestore: 'payment', collection: PAYMENT_COLLECTION, nullable: true }\n];\n\nconst dateFieldMappings: GenericDateFieldMapping<ESIMApp, ESIMFirestore>[] = [\n    { field: 'time_assigned', nullable: true },\n    { field: 'last_updated', nullable: true }\n];\n\n// Conversion functions\nexport const esimToFirestore = (esim: ESIMApp): ESIMFirestore => {\n    return genericToFirestore({\n        appObject: esim,\n        refFieldMappings,\n        dateFieldMappings\n    });\n};\n\nexport const esimFromFirestore = (firestoreEsim: ESIMFirestore): ESIMApp => {\n    return genericFromFirestore({\n        firestoreObject: firestoreEsim,\n        refFieldMappings,\n        dateFieldMappings\n    });\n};\n\n// For backwards compatibility\nexport type ESIM = ESIMFirestore;\nexport type HESIM = ESIMApp; ","import { z } from 'zod';\nimport { Timestamp } from 'firebase/firestore';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    timestampSchema,\n    fromFirestore,\n    toFirestore\n} from './helpers';\nimport {\n    GenericDateFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\n\n// Firestore schema for Message\nexport const messageFirestoreSchema = z.object({\n    id: z.string(),\n    key: z.string(),\n    method: z.enum([\"push\", \"sms\", \"email\"]),\n    status: z.enum([\"pending\", \"sent\", \"failed\", \"delivered\"]),\n    created_at: timestampSchema,\n    updated_at: timestampSchema\n});\n\n// App schema for Message\nexport const messageAppSchema = z.object({\n    id: z.string(),\n    key: z.string(),\n    method: z.enum([\"push\", \"sms\", \"email\"]),\n    status: z.enum([\"pending\", \"sent\", \"failed\", \"delivered\"]),\n    created_at: z.date(),\n    updated_at: z.date()\n});\n\n// Define SentMessages schema (a record of messages)\nexport const sentMessagesFirestoreSchema = z.record(messageFirestoreSchema);\nexport const sentMessagesAppSchema = z.record(messageAppSchema);\n\n// Define types based on schemas\nexport type MessageFirestore = z.infer<typeof messageFirestoreSchema>;\nexport type MessageApp = z.infer<typeof messageAppSchema>;\nexport type SentMessagesFirestore = z.infer<typeof sentMessagesFirestoreSchema>;\nexport type SentMessagesApp = z.infer<typeof sentMessagesAppSchema>;\n\n// Define date field mappings\nconst dateFieldMappings: GenericDateFieldMapping<MessageApp, MessageFirestore>[] = [\n    { field: 'created_at' },\n    { field: 'updated_at' }\n];\n\n// Conversion functions\nexport const messageToFirestore = (message: MessageApp): MessageFirestore => {\n    return genericToFirestore({\n        appObject: message,\n        refFieldMappings: [],\n        dateFieldMappings\n    });\n};\n\nexport const messageFromFirestore = (firestoreMessage: MessageFirestore): MessageApp => {\n    return genericFromFirestore({\n        firestoreObject: firestoreMessage,\n        refFieldMappings: [],\n        dateFieldMappings\n    });\n};\n\n// Convert a record of messages - with null safety\nexport const sentMessagesToFirestore = (sentMessages: SentMessagesApp): SentMessagesFirestore => {\n    const result: Record<string, MessageFirestore> = {};\n\n    for (const key in sentMessages) {\n        const message = sentMessages[key];\n        if (message) {\n            result[key] = messageToFirestore(message);\n        }\n    }\n\n    return result;\n};\n\nexport const sentMessagesFromFirestore = (firestoreSentMessages: SentMessagesFirestore): SentMessagesApp => {\n    const result: Record<string, MessageApp> = {};\n\n    for (const key in firestoreSentMessages) {\n        const firestoreMessage = firestoreSentMessages[key];\n        if (firestoreMessage) {\n            result[key] = messageFromFirestore(firestoreMessage);\n        }\n    }\n\n    return result;\n};\n\n// For backwards compatibility\nexport type Message = MessageFirestore;\nexport type HMessage = MessageApp;\nexport type SentMessages = SentMessagesFirestore;\nexport type HSentMessages = SentMessagesApp;\n\n// Helper function for backward compatibility with runtime type conversion\nexport const convertSentMessagesToFirestore = (sentMessages: Record<string, MessageApp>): Record<string, MessageFirestore> => {\n    const result: Record<string, MessageFirestore> = {};\n    \n    for (const key in sentMessages) {\n        const message = sentMessages[key];\n        if (message) {\n            // Convert Date to Timestamp for Firestore if needed\n            const firestoreMessage: MessageFirestore = {\n                ...message,\n                created_at: message.created_at instanceof Date \n                    ? Timestamp.fromDate(message.created_at) \n                    : message.created_at,\n                updated_at: message.updated_at instanceof Date \n                    ? Timestamp.fromDate(message.updated_at) \n                    : message.updated_at\n            } as MessageFirestore;\n            \n            result[key] = firestoreMessage;\n        }\n    }\n    \n    return result;\n};\n\nexport const convertSentMessagesFromFirestore = (firestoreSentMessages: Record<string, MessageFirestore>): Record<string, MessageApp> => {\n    const result: Record<string, MessageApp> = {};\n    \n    for (const key in firestoreSentMessages) {\n        const firestoreMessage = firestoreSentMessages[key];\n        if (firestoreMessage) {\n            // Convert Timestamp to Date for app if needed\n            const appMessage: MessageApp = {\n                ...firestoreMessage,\n                created_at: firestoreMessage.created_at instanceof Timestamp \n                    ? firestoreMessage.created_at.toDate() \n                    : firestoreMessage.created_at as unknown as Date,\n                updated_at: firestoreMessage.updated_at instanceof Timestamp \n                    ? firestoreMessage.updated_at.toDate() \n                    : firestoreMessage.updated_at as unknown as Date\n            };\n            \n            result[key] = appMessage;\n        }\n    }\n    \n    return result;\n}; ","import { z } from 'zod';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    fromFirestore,\n    toFirestore\n} from './helpers';\nimport {\n    GenericRefFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\nimport {\n    COUNTRY_COLLECTION,\n    PARTNER_COLLECTION\n} from './utils/collections';\nimport { countryFirestoreSchema, CountryFirestore, CountryApp } from './country';\nimport {\n    countryRefSchema,\n    partnerRefNullable,\n    countryRefString,\n    partnerRefStringNullable\n} from './refs';\n\n// Common package fields shared between Firestore and App schemas\nconst commonPackageFields = {\n    external_id: z.string(),\n    provider: z.string(),\n    coverage_label: z.string().nullable(),\n    label: z.string(),\n    bytes: z.number(),\n    hidden: z.boolean(),\n    is_hidden: z.boolean(),\n    is_active: z.boolean(),\n    priority: z.number(),\n    country_data: countryFirestoreSchema.nullable(),\n    price: z.number(),\n    partner_price: z.number(),\n    days: z.number(),\n    name: z.string(),\n    type: z.enum(['data-limited', 'time-limited']).nullable(),\n    throttling: z.number().optional(),\n    provider_parameters: z.object({\n        imsi: z.number()\n    }).nullable()\n};\n\n\n// Firestore schema for Package\nexport const packageFirestoreSchema = baseModelSchema.extend({\n    ...commonPackageFields,\n    country: countryRefSchema.schema,\n    partner: partnerRefNullable,\n});\n\n// App schema for Package\nexport const packageAppSchema = baseModelAppSchema.extend({\n    ...commonPackageFields,\n    country: countryRefString,\n    partner: partnerRefStringNullable,\n});\n\n// Define types based on schemas\nexport type PackageFirestore = z.infer<typeof packageFirestoreSchema>;\nexport type PackageApp = z.infer<typeof packageAppSchema>;\n\n// Field mapping for conversions\nconst refFieldMappings: GenericRefFieldMapping<PackageApp, PackageFirestore>[] = [\n    { app: 'country', firestore: 'country', collection: COUNTRY_COLLECTION },\n    { app: 'partner', firestore: 'partner', collection: PARTNER_COLLECTION, nullable: true }\n];\n\n// Conversion functions\nexport const packageToFirestore = (packageData: PackageApp): PackageFirestore => {\n    return genericToFirestore({\n        appObject: packageData,\n        refFieldMappings,\n        dateFieldMappings: []\n    });\n};\n\nexport const packageFromFirestore = (firestorePackage: PackageFirestore): PackageApp => {\n    return genericFromFirestore({\n        firestoreObject: firestorePackage,\n        refFieldMappings,\n        dateFieldMappings: []\n    });\n};\n\n// For backwards compatibility\nexport type Package = PackageFirestore;\nexport type HPackage = PackageApp; ","import { z } from 'zod';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    timestampSchema,\n    documentRefSchema,\n    createDocRefSchema,\n    docRefToStringSchema,\n    fromFirestore,\n    toFirestore\n} from './helpers';\nimport { SUPPORTED_LOCALES, supportedLocalesSchema } from '../constants';\nimport {\n    partnerRefSchema,\n    priceListRefSchema,\n    packageRefSchema,\n    userRefSchema,\n    partnerRefNullable,\n    userRefArrayNullable,\n    priceListRefNullable,\n    packageRefString,\n    partnerRefStringNullable,\n    userRefStringArrayNullable,\n    priceListRefStringNullable,\n    PARTNER_COLLECTION,\n    PRICE_LIST_COLLECTION,\n    PACKAGE_COLLECTION,\n    USER_COLLECTION\n} from './refs';\n\n// Helper schemas for nested structures\nexport const addressSchema = z.object({\n    street: z.string().optional(),\n    city: z.string().optional(),\n    postal_code: z.string().optional(),\n    country: z.string().optional()\n}).nullable();\n\nexport const registrationSchema = z.object({\n    chamber_of_commerce_number: z.string().nullable().optional(),\n    vat_number: z.string().nullable().optional(),\n    anvr_number: z.number().nullable().optional(),\n    tax_number: z.string().nullable().optional()\n}).nullable();\n\nexport const bankingDetailsSchema = z.object({\n    account_holder: z.string(),\n    bank_name: z.string(),\n    iban: z.string()\n}).nullable();\n\n// Common package price fields shared between Firestore and App schemas\nconst commonPackagePriceFields = {\n    destination: z.string(),\n    label: z.string(),\n    type: z.enum(['data-limit', 'time-limit']),\n    price: z.number()\n};\n\nexport const packagePriceFirestoreSchema = z.object({\n    ...commonPackagePriceFields,\n    package: packageRefSchema.schema,\n});\n\nexport const packagePriceAppSchema = z.object({\n    ...commonPackagePriceFields,\n    package: packageRefString,\n});\n\n// Common pricing strategy fields\nconst commonPricingStrategyFields = {\n    modification_percentage: z.number()\n};\n\nexport const partnerPricingStrategyFirestoreSchema = z.object({\n    ...commonPricingStrategyFields,\n    strategy: z.enum(['split', 'bundle']),\n    default_price_list: priceListRefNullable,\n    custom_prices: z.array(packagePriceFirestoreSchema),\n});\n\nexport const partnerPricingStrategyAppSchema = z.object({\n    ...commonPricingStrategyFields,\n    strategy: z.enum(['split', 'bundle']),\n    default_price_list: priceListRefStringNullable,\n    custom_prices: z.array(packagePriceAppSchema),\n});\n\nexport const userPricingStrategyFirestoreSchema = z.object({\n    ...commonPricingStrategyFields,\n    default_price_list: priceListRefNullable,\n    custom_prices: z.array(packagePriceFirestoreSchema),\n});\n\nexport const userPricingStrategyAppSchema = z.object({\n    ...commonPricingStrategyFields,\n    default_price_list: priceListRefStringNullable,\n    custom_prices: z.array(packagePriceAppSchema),\n});\n\n// Common financial properties fields\nconst commonFinancialPropertiesFields = {\n    administration_fee: z.number().nullable(),\n    income_per_gb: z.number().nullable(),\n    commission_fee: z.number().nullable().optional(),\n    payment_method: z.enum(['invoice', 'direct']),\n    requires_card: z.boolean().nullable(),\n    next_invoice: z.date().nullable(),\n    last_invoice: z.date().nullable(),\n};\n\nexport const financialPropertiesFirestoreSchema = z.object({\n    ...commonFinancialPropertiesFields,\n    pricing_strategies: z.object({\n        partner: partnerPricingStrategyFirestoreSchema.optional(),\n        user: userPricingStrategyFirestoreSchema.optional()\n    }).nullable()\n}).nullable();\n\nexport const financialPropertiesAppSchema = z.object({\n    ...commonFinancialPropertiesFields,\n    pricing_strategies: z.object({\n        partner: partnerPricingStrategyAppSchema.optional(),\n        user: userPricingStrategyAppSchema.optional()\n    }).nullable()\n}).nullable();\n\nexport const packageStrategySchema = z.object({\n    name: z.string(),\n    iso3_white_list: z.array(z.string()).optional(),\n    parameters: z.any()\n});\n\nexport const bookingDefaultsSchema = z.object({\n    locale: supportedLocalesSchema\n});\n\nexport const bookingConfirmationSchema = z.object({\n    brevo_template_id: z.number(),\n    send_booking_confirmation: z.boolean()\n});\n\nexport const visualIdentityBannerSchema = z.object({\n    image_url: z.string(),\n    alt: z.string(),\n    click_url: z.string(),\n    locale: supportedLocalesSchema,\n    properties: z.record(z.string())\n});\n\nexport const visualIdentityBannerStrategySchema = z.object({\n    strategy: z.enum(['fixed', 'rotating', 'destination', 'time_of_day']),\n    banners: z.array(visualIdentityBannerSchema)\n});\n\nexport const visualIdentitySchema = z.object({\n    primary_color: z.string(),\n    secondary_color: z.string(),\n    logo: z.string(),\n    font: z.string(),\n    top_banner: visualIdentityBannerStrategySchema,\n    mid_banner: visualIdentityBannerStrategySchema\n});\n\nexport const scheduleFilterSchema = z.object({\n    type: z.enum(['iso3', 'gender', 'percentage', 'age']),\n    value: z.union([z.string(), z.number()]),\n    comparison: z.enum([\n        'equal',\n        'not_equal',\n        'greater_than',\n        'less_than',\n        'greater_than_or_equal',\n        'less_than_or_equal'\n    ])\n}).nullable().optional();\n\nexport const scheduleSchema = z.object({\n    days: z.number(),\n    email: z.object({\n        brevo_template_id: z.number(),\n        subject: z.record(z.string()).optional(),\n        preview_text: z.record(z.string()).optional()\n    }).nullable().optional(),\n    push: z.object({\n        title: z.record(z.string()).optional(),\n        body: z.record(z.string()).optional(),\n        target: z.string()\n    }).nullable().optional(),\n    hour: z.number(),\n    key: z.string(),\n    method: z.enum(['email', 'sms', 'whatsapp', 'push']),\n    moment: z.enum(['departure', 'return', 'immediate']),\n    filter: scheduleFilterSchema\n});\n\nexport const platformSettingsSchema = z.object({\n    package_strategy: packageStrategySchema.nullable().optional(),\n    free_esim: z.object({\n        allowance: z.number().nullable(),\n        package_specifications: z.record(z.any()).nullable()\n    }).nullable(),\n    booking_defaults: bookingDefaultsSchema.nullable(),\n    schedules: z.array(scheduleSchema).nullable(),\n    booking_confirmation: bookingConfirmationSchema.nullable()\n}).nullable();\n\n// Common partner fields shared between Firestore and App schemas\nconst commonPartnerFields = {\n    // Basic information\n    name: z.string().nullable(),\n    type: z.string().nullable(),\n    is_active: z.boolean().nullable().optional(),\n    external_id: z.string().nullable().optional(),\n\n    // Contact information\n    contact: z.object({\n        email: z.string().nullable(),\n        office_phone: z.string().nullable().optional()\n    }).nullable(),\n\n    // Location information\n    address: addressSchema,\n\n    // Registration information\n    registration: registrationSchema,\n\n    // Banking information\n    banking_details: bankingDetailsSchema,\n\n    // Platform settings\n    platform_settings: platformSettingsSchema,\n\n    // Visual identity\n    visual_identity: visualIdentitySchema.nullable(),\n\n    // Metadata\n    data: z.object({\n        source: z.string(),\n        manual: z.boolean()\n    }).nullable()\n};\n\n// Firestore schema for Partner\nexport const partnerFirestoreSchema = baseModelSchema.extend({\n    ...commonPartnerFields,\n    parent: partnerRefNullable,\n    users: userRefArrayNullable,\n    financial_properties: financialPropertiesFirestoreSchema,\n});\n\n// App schema for Partner\nexport const partnerAppSchema = baseModelAppSchema.extend({\n    ...commonPartnerFields,\n    parent: partnerRefStringNullable,\n    users: userRefStringArrayNullable,\n    financial_properties: financialPropertiesAppSchema,\n});\n\n// Common price list fields\nconst commonPriceListFields = {\n    name: z.string(),\n    type: z.enum(['partner', 'user']).default('partner'),\n};\n\n// Type for price list\nexport const priceListFirestoreSchema = baseModelSchema.extend({\n    ...commonPriceListFields,\n    price_list: z.array(packagePriceFirestoreSchema)\n});\n\nexport const priceListAppSchema = baseModelAppSchema.extend({\n    ...commonPriceListFields,\n    price_list: z.array(packagePriceAppSchema)\n});\n\n// Define types based on schemas\n\n\n// Field mapping for conversions using the shared GenericRefFieldMapping interface\nimport {\n    GenericRefFieldMapping,\n    GenericDateFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\n\nconst refFieldMappings: GenericRefFieldMapping<PartnerApp, PartnerFirestore>[] = [\n    { app: 'parent', firestore: 'parent', collection: PARTNER_COLLECTION, nullable: true },\n    { app: 'users', firestore: 'users', collection: USER_COLLECTION, nullable: true, isArray: true }\n];\n\n// Conversion functions\nexport const partnerToFirestore = (partner: PartnerApp): PartnerFirestore => {\n    return genericToFirestore({\n        appObject: partner,\n        refFieldMappings,\n        dateFieldMappings: [],\n        specialCaseHandler: (result: Record<string, any>, appData: PartnerApp) => {\n            // Handle financial properties specially due to complex nested structure\n            if (appData.financial_properties) {\n                const fp = { ...appData.financial_properties };\n                const financialProps: any = {\n                    ...fp,\n                    pricing_strategies: null\n                };\n\n                // Handle pricing strategies if they exist\n                if (fp.pricing_strategies) {\n                    const ps = fp.pricing_strategies;\n                    const pricingStrategies: any = {};\n\n                    // Convert partner pricing strategy if it exists\n                    if (ps.partner) {\n                        const partnerStrategy = {\n                            ...ps.partner,\n                            default_price_list: ps.partner.default_price_list\n                                ? toFirestore.ref<PriceListFirestore>(PRICE_LIST_COLLECTION, ps.partner.default_price_list)\n                                : null,\n                            custom_prices: ps.partner.custom_prices.map((price: PackagePriceApp) => ({\n                                ...price,\n                                package: toFirestore.ref<any>(PACKAGE_COLLECTION, price.package)\n                            }))\n                        };\n\n                        const partnerStrategyObj: any = partnerStrategy;\n\n                        if ('default_price_list' in partnerStrategyObj) {\n                            delete partnerStrategyObj.default_price_list;\n                        }\n\n                        pricingStrategies.partner = partnerStrategyObj;\n                    }\n\n                    // Convert user pricing strategy if it exists\n                    if (ps.user) {\n                        const userStrategy = {\n                            ...ps.user,\n                            default_price_list: ps.user.default_price_list\n                                ? toFirestore.ref<PriceListFirestore>(PRICE_LIST_COLLECTION, ps.user.default_price_list)\n                                : null,\n                            custom_prices: ps.user.custom_prices.map((price: PackagePriceApp) => ({\n                                ...price,\n                                package: toFirestore.ref<any>(PACKAGE_COLLECTION, price.package)\n                            }))\n                        };\n\n                        const userStrategyObj: any = userStrategy;\n\n                        if ('default_price_list' in userStrategyObj) {\n                            delete userStrategyObj.default_price_list;\n                        }\n\n                        pricingStrategies.user = userStrategyObj;\n                    }\n\n                    // Set pricing strategies\n                    financialProps.pricing_strategies = pricingStrategies;\n                }\n\n                result.financial_properties = financialProps;\n            }\n        }\n    });\n};\n\nexport const partnerFromFirestore = (firestorePartner: PartnerFirestore): PartnerApp => {\n    return genericFromFirestore({\n        firestoreObject: firestorePartner,\n        refFieldMappings,\n        dateFieldMappings: [],\n        specialCaseHandler: (result: Record<string, any>, firestoreData: PartnerFirestore) => {\n            // Handle financial properties specially\n            if (firestoreData.financial_properties) {\n                const fp = { ...firestoreData.financial_properties };\n                const financialProps: any = {\n                    ...fp,\n                    pricing_strategies: null\n                };\n\n                // Handle pricing strategies if they exist\n                if (fp.pricing_strategies) {\n                    const ps = fp.pricing_strategies;\n                    const pricingStrategies: any = {};\n\n                    // Convert partner pricing strategy if it exists\n                    if (ps.partner) {\n                        const partnerStrategy = {\n                            ...ps.partner,\n                            default_price_list: ps.partner.default_price_list\n                                ? fromFirestore.ref(ps.partner.default_price_list)\n                                : null,\n                            custom_prices: ps.partner.custom_prices.map(price => ({\n                                ...price,\n                                package: fromFirestore.ref(price.package)\n                            }))\n                        };\n\n                        const partnerStrategyObj: any = partnerStrategy;\n\n                        if ('default_price_list' in partnerStrategyObj) {\n                            delete partnerStrategyObj.default_price_list;\n                        }\n\n                        pricingStrategies.partner = partnerStrategyObj;\n                    }\n\n                    // Convert user pricing strategy if it exists\n                    if (ps.user) {\n                        const userStrategy = {\n                            ...ps.user,\n                            default_price_list: ps.user.default_price_list\n                                ? fromFirestore.ref(ps.user.default_price_list)\n                                : null,\n                            custom_prices: ps.user.custom_prices.map(price => ({\n                                ...price,\n                                package: fromFirestore.ref(price.package)\n                            }))\n                        };\n\n                        const userStrategyObj: any = userStrategy;\n\n                        if ('default_price_list' in userStrategyObj) {\n                            delete userStrategyObj.default_price_list;\n                        }\n\n                        pricingStrategies.user = userStrategyObj;\n                    }\n\n                    // Set pricing strategies\n                    financialProps.pricing_strategies = pricingStrategies;\n                }\n\n                result.financial_properties = financialProps;\n            }\n        }\n    });\n};\n\n// Field mapping for price list conversions\nconst priceListRefFieldMappings: GenericRefFieldMapping<PriceListApp, PriceListFirestore>[] = [];\n\n// Conversion function for PriceList from Firestore to App format\nexport const priceListFromFirestore = (firestorePriceList: PriceListFirestore): PriceListApp => {\n    return genericFromFirestore({\n        firestoreObject: firestorePriceList,\n        refFieldMappings: priceListRefFieldMappings,\n        dateFieldMappings: [],\n        specialCaseHandler: (result: Record<string, any>, firestoreData: PriceListFirestore) => {\n            // Convert array of objects with document references\n            const priceList = firestoreData.price_list;\n            if (Array.isArray(priceList)) {\n                result.price_list = priceList.map((item: any) => ({\n                    ...item,\n                    package: fromFirestore.ref(item.package)\n                }));\n            }\n        }\n    });\n};\n\n// Conversion function for PriceList from App to Firestore format\nexport const priceListToFirestore = (priceList: PriceListApp): PriceListFirestore => {\n    return genericToFirestore({\n        appObject: priceList,\n        refFieldMappings: priceListRefFieldMappings,\n        dateFieldMappings: [],\n        specialCaseHandler: (result: Record<string, any>, appData: PriceListApp) => {\n            // Convert array of objects with document references\n            const priceListValue = appData.price_list;\n            if (Array.isArray(priceListValue)) {\n                result.price_list = priceListValue.map((item: any) => ({\n                    ...item,\n                    package: toFirestore.ref<any>(PACKAGE_COLLECTION, item.package)\n                }));\n            }\n        }\n    });\n};\n\n// For backwards compatibility\nexport type Partner = PartnerFirestore;\nexport type HPartner = PartnerApp;\nexport type PriceList = PriceListFirestore;\nexport type HPriceList = PriceListApp;\n\nexport type HPackagePrice = z.infer<typeof packagePriceAppSchema>;\nexport type PackagePrice = z.infer<typeof packagePriceFirestoreSchema>;\n\nexport type HFinancialProperties = z.infer<typeof financialPropertiesAppSchema>;\nexport type FinancialProperties = z.infer<typeof financialPropertiesFirestoreSchema>;\nexport type HPlatformSettings = z.infer<typeof platformSettingsSchema>;\nexport type HVisualIdentity = z.infer<typeof visualIdentitySchema>;\nexport type HSchedule = z.infer<typeof scheduleSchema>;\nexport type HPackageStrategy = z.infer<typeof packageStrategySchema>;\nexport type HBookingDefaults = z.infer<typeof bookingDefaultsSchema>;\nexport type HBookingConfirmation = z.infer<typeof bookingConfirmationSchema>;\nexport type HVisualIdentityBanner = z.infer<typeof visualIdentityBannerSchema>;\nexport type HVisualIdentityBannerStrategy = z.infer<typeof visualIdentityBannerStrategySchema>;\nexport type HScheduleFilter = z.infer<typeof scheduleFilterSchema>;\nexport type PartnerFirestore = z.infer<typeof partnerFirestoreSchema>;\nexport type PartnerApp = z.infer<typeof partnerAppSchema>;\nexport type PriceListFirestore = z.infer<typeof priceListFirestoreSchema>;\nexport type PriceListApp = z.infer<typeof priceListAppSchema>;\nexport type Address = z.infer<typeof addressSchema>;\nexport type Registration = z.infer<typeof registrationSchema>;\nexport type BankingDetails = z.infer<typeof bankingDetailsSchema>;\nexport type PackagePriceFirestore = z.infer<typeof packagePriceFirestoreSchema>;\nexport type PackagePriceApp = z.infer<typeof packagePriceAppSchema>;\nexport type PartnerPricingStrategyFirestore = z.infer<typeof partnerPricingStrategyFirestoreSchema>;\nexport type PartnerPricingStrategyApp = z.infer<typeof partnerPricingStrategyAppSchema>;\nexport type UserPricingStrategyFirestore = z.infer<typeof userPricingStrategyFirestoreSchema>;\nexport type UserPricingStrategyApp = z.infer<typeof userPricingStrategyAppSchema>;\nexport type FinancialPropertiesFirestore = z.infer<typeof financialPropertiesFirestoreSchema>;\nexport type FinancialPropertiesApp = z.infer<typeof financialPropertiesAppSchema>;\nexport type PackageStrategy = z.infer<typeof packageStrategySchema>;\nexport type BookingDefaults = z.infer<typeof bookingDefaultsSchema>;\nexport type BookingConfirmation = z.infer<typeof bookingConfirmationSchema>;\nexport type VisualIdentityBanner = z.infer<typeof visualIdentityBannerSchema>;\nexport type VisualIdentityBannerStrategy = z.infer<typeof visualIdentityBannerStrategySchema>;\nexport type VisualIdentity = z.infer<typeof visualIdentitySchema>;\nexport type ScheduleFilter = z.infer<typeof scheduleFilterSchema>;\nexport type Schedule = z.infer<typeof scheduleSchema>;\nexport type PlatformSettings = z.infer<typeof platformSettingsSchema>;","import { z } from 'zod';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    fromFirestore,\n    toFirestore\n} from './helpers';\nimport {\n    GenericDateFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\n\n// Firestore schema for Payment\nexport const paymentFirestoreSchema = baseModelSchema.extend({\n    amount: z.number(),\n    customer: z.string(),\n    date: z.date(), // Note: In Firestore this would be a Timestamp, but we simplified for this example\n    iccid: z.string(),\n    package: z.string(),\n    promo: z.string(),\n    topup: z.boolean()\n});\n\n// App schema for Payment - identical to Firestore schema since no special types\nexport const paymentAppSchema = baseModelAppSchema.extend({\n    amount: z.number(),\n    customer: z.string(),\n    date: z.date(),\n    iccid: z.string(),\n    package: z.string(),\n    promo: z.string(),\n    topup: z.boolean()\n});\n\n// Define types based on schemas\nexport type PaymentFirestore = z.infer<typeof paymentFirestoreSchema>;\nexport type PaymentApp = z.infer<typeof paymentAppSchema>;\n\n// Define date field mappings\nconst dateFieldMappings: GenericDateFieldMapping<PaymentApp, PaymentFirestore>[] = [\n    { field: 'date' }\n];\n\n// Conversion functions using generic utilities\nexport const paymentToFirestore = (payment: PaymentApp): PaymentFirestore => {\n    return genericToFirestore({\n        appObject: payment,\n        refFieldMappings: [],\n        dateFieldMappings\n    });\n};\n\nexport const paymentFromFirestore = (firestorePayment: PaymentFirestore): PaymentApp => {\n    return genericFromFirestore({\n        firestoreObject: firestorePayment,\n        refFieldMappings: [],\n        dateFieldMappings\n    });\n};\n\n// For backwards compatibility\nexport type Payment = PaymentFirestore;\nexport type HPayment = PaymentApp; ","import { z } from 'zod';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    timestampSchema\n} from './helpers';\nimport {\n    GenericRefFieldMapping,\n    GenericDateFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\nimport {\n    PROMO_CODE_COLLECTION,\n    PARTNER_COLLECTION,\n    COUNTRY_COLLECTION,\n    PACKAGE_COLLECTION,\n    BOOKING_COLLECTION\n} from './utils/collections';\nimport { packageSpecificationSchema } from './api';\nimport { \n    partnerRefNullable,\n    countryRefNullable,\n    packageRefNullable,\n    bookingRefNullable,\n    partnerRefStringNullable,\n    countryRefStringNullable,\n    packageRefStringNullable,\n    bookingRefStringNullable\n} from './refs';\n\n// Firestore schema for PromoCode\nexport const promoCodeFirestoreSchema = baseModelSchema.extend({\n    external_id: z.string(),\n    code: z.string(),\n    allowance_user: z.number(),\n    allowance_total: z.number(),\n    type: z.enum(['full-discount', 'partial-discount', 'booking', 'traveler']).nullable().or(z.string()),\n    usage: z.array(z.string()),\n    uuid_usage: z.array(z.string()),\n    package_specification: packageSpecificationSchema.optional(),\n    partner: partnerRefNullable,\n    valid_from: z.union([z.string(), z.date(), timestampSchema]),\n    valid_to: z.union([z.string(), z.date(), timestampSchema]),\n\n    // Optional fields based on the type\n    discount: z.number().optional(),\n    package_size: z.string().optional(),\n    package: packageRefNullable,\n    country: countryRefNullable,\n    booking: bookingRefNullable,\n    countries: z.array(z.string()).optional(),\n    max_bytes: z.number().optional(),\n    starter_data: z.number().optional()\n});\n\n// App schema for PromoCode\nexport const promoCodeAppSchema = baseModelAppSchema.extend({\n    external_id: z.string(),\n    code: z.string(),\n    allowance_user: z.number(),\n    allowance_total: z.number(),\n    type: z.enum(['full-discount', 'partial-discount', 'booking', 'traveler']).nullable().or(z.string()),\n    usage: z.array(z.string()),\n    uuid_usage: z.array(z.string()),\n    package_specification: packageSpecificationSchema.optional(),\n    partner: partnerRefStringNullable,\n    valid_from: z.date(),\n    valid_to: z.date(),\n\n    // Optional fields based on the type\n    discount: z.number().optional(),\n    package_size: z.string().optional(),\n    package: packageRefStringNullable,\n    country: countryRefStringNullable,\n    booking: bookingRefStringNullable,\n    countries: z.array(z.string()).optional(),\n    max_bytes: z.number().optional(),\n    starter_data: z.number().optional()\n});\n\n// Type definitions\nexport type PromoCodeFirestore = z.infer<typeof promoCodeFirestoreSchema>;\nexport type PromoCodeApp = z.infer<typeof promoCodeAppSchema>;\n\n// Field mapping for conversions\nconst refFieldMappings: GenericRefFieldMapping<PromoCodeApp, PromoCodeFirestore>[] = [\n    { app: 'partner', firestore: 'partner', collection: PARTNER_COLLECTION, nullable: true },\n    { app: 'package', firestore: 'package', collection: PACKAGE_COLLECTION, nullable: true },\n    { app: 'country', firestore: 'country', collection: COUNTRY_COLLECTION, nullable: true },\n    { app: 'booking', firestore: 'booking', collection: BOOKING_COLLECTION, nullable: true }\n];\n\nconst dateFieldMappings: GenericDateFieldMapping<PromoCodeApp, PromoCodeFirestore>[] = [\n    { field: 'valid_from' },\n    { field: 'valid_to' }\n];\n\n// Conversion functions\nexport const promoCodeToFirestore = (promoCode: PromoCodeApp): PromoCodeFirestore => {\n    return genericToFirestore({\n        appObject: promoCode,\n        refFieldMappings,\n        dateFieldMappings\n    });\n};\n\nexport const promoCodeFromFirestore = (firestorePromoCode: PromoCodeFirestore): PromoCodeApp => {\n    return genericFromFirestore({\n        firestoreObject: firestorePromoCode,\n        refFieldMappings,\n        dateFieldMappings\n    });\n};\n\n// For backwards compatibility\nexport type PromoCode = PromoCodeFirestore;\nexport type HPromoCode = PromoCodeApp; ","import { z } from 'zod';\nimport { DocumentReference, Timestamp, FieldValue } from 'firebase/firestore';\nimport {\n    baseModelSchema,\n    baseModelAppSchema,\n    timestampSchema,\n    fromFirestore,\n    toFirestore,\n    fieldValueSchema\n} from './helpers';\nimport {\n    GenericRefFieldMapping,\n    GenericDateFieldMapping,\n    genericToFirestore,\n    genericFromFirestore\n} from './utils';\nimport {\n    PROFILE_COLLECTION,\n    PARTNER_COLLECTION\n} from './utils/collections';\nimport {\n    partnerRefNullable,\n    profileRefNullable,\n    partnerRefStringNullable,\n    profileRefStringNullable\n} from './refs';\n\n// Schema for API Key\nexport const apiKeySchema = z.object({\n    expires_at: timestampSchema,\n    secret: z.string(),\n    is_active: z.boolean()\n});\n\n// Schema for API Keys\nexport const apiKeysSchema = z.object({\n    allowed_keys: z.array(z.string()),\n    keys: z.record(z.string(), apiKeySchema)\n});\n\n// Common user fields shared between Firestore and App schemas\nconst commonUserFields = {\n    name: z.string().nullable(),\n    email: z.string().email().nullable(),\n    stripe_id: z.string().nullable(),\n    referral: z.string().nullable(),\n    fcm: z.string().optional(),\n    deeplink: z.string().nullable(),\n    gender: z.string().nullable(),\n    company: z.string().nullable(),\n    coordinates: z.string().nullable(),\n    parameters: z.any().nullable(),\n    locale: z.string().nullable(),\n    phone_model: z.string().nullable(),\n    phone_os: z.string().nullable(),\n    phone_os_version: z.string().nullable(),\n    ios: z.boolean().nullable(),\n    has_card_saved: z.boolean().nullable(),\n    admin: z.boolean().nullable(),\n    api_keys: apiKeysSchema.nullable(),\n    currency: z.string().nullable(),\n    receipt_email: z.string().nullable()\n};\n\n// Define Firestore schema\nexport const userFirestoreSchema = baseModelSchema.extend({\n    ...commonUserFields,\n    createdAt: timestampSchema,\n    partner: partnerRefNullable,\n    profileRef: profileRefNullable,\n    balance: z.union([z.number(), z.null(), fieldValueSchema]),\n    review_requested: timestampSchema.nullable(),\n    last_seen: timestampSchema.nullable()\n});\n\n// Define App schema (with JavaScript-friendly types)\nexport const userAppSchema = baseModelAppSchema.extend({\n    ...commonUserFields,\n    createdAt: z.date(),\n    partner: partnerRefStringNullable,\n    profileRef: profileRefStringNullable,\n    balance: z.number().nullable(),\n    review_requested: z.date().nullable(),\n    last_seen: z.date().nullable()\n});\n\n// Define types based on schemas\nexport type UserFirestore = z.infer<typeof userFirestoreSchema>;\nexport type UserApp = z.infer<typeof userAppSchema>;\nexport type ApiKeys = z.infer<typeof apiKeysSchema>;\nexport type ApiKey = z.infer<typeof apiKeySchema>;\n\n// Field mapping for conversions\nconst refFieldMappings: GenericRefFieldMapping<UserApp, UserFirestore>[] = [\n    { app: 'profileRef', firestore: 'profileRef', collection: PROFILE_COLLECTION, nullable: true },\n    { app: 'partner', firestore: 'partner', collection: PARTNER_COLLECTION, nullable: true }\n];\n\nconst dateFieldMappings: GenericDateFieldMapping<UserApp, UserFirestore>[] = [\n    { field: 'createdAt' },\n    { field: 'review_requested', nullable: true },\n    { field: 'last_seen', nullable: true }\n];\n\n// Conversion functions\nexport const userToFirestore = (user: UserApp): UserFirestore => {\n    return genericToFirestore({\n        appObject: user,\n        refFieldMappings,\n        dateFieldMappings\n    });\n};\n\nexport const userFromFirestore = (firestoreUser: UserFirestore): UserApp => {\n    return genericFromFirestore({\n        firestoreObject: firestoreUser,\n        refFieldMappings,\n        dateFieldMappings,\n        specialCaseHandler: (result, firestoreData) => {\n            // Handle special case for balance field\n            if (firestoreData.balance instanceof FieldValue) {\n                result.balance = null; // Handle FieldValue by converting to null for the app\n            }\n        }\n    });\n};\n\n// Handle the special case of balance field which can be FieldValue\nexport const userToFirestoreWithBalance = (user: UserApp): UserFirestore => {\n    const result = userToFirestore(user);\n\n    // Special handling for balance field if it's a FieldValue\n    if (user.balance === null || typeof user.balance === 'number') {\n        result.balance = user.balance;\n    }\n\n    return result;\n};\n\n// For backwards compatibility\nexport type User = UserFirestore;\nexport type HUser = UserApp; "],"mappings":"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","names":["z","z","refFieldMappings","dateFieldMappings","z","z","z","z","z","z","z","dateFieldMappings","z","z","z","z","dateFieldMappings","z","z","refFieldMappings","dateFieldMappings","z","Timestamp","z","dateFieldMappings","Timestamp","z","z","refFieldMappings","z","z","refFieldMappings","z","z","dateFieldMappings","z","z","refFieldMappings","dateFieldMappings","z","FieldValue","z","refFieldMappings","dateFieldMappings","FieldValue"]}