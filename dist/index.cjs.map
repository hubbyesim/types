{"version":3,"sources":["../src/builders/server.ts","../src/common.ts","../src/services/firebase.ts","../src/specs/user.ts","../src/specs/common.ts","../src/specs/booking.ts","../src/constants.ts","../src/specs/country.ts","../src/specs/currency.ts","../src/specs/esim.ts","../src/specs/payment.ts","../src/specs/analytics.ts","../src/specs/message.ts","../src/specs/package.ts","../src/specs/promocode.ts","../src/specs/partner.ts","../src/specs/apiLogs.ts","../src/utils/firestoreTransformUtils.ts","../src/builders/client.ts","../src/index.client.ts","../src/utils/modelConverterFactory.ts","../src/index.server.ts"],"names":["z","SUPPORTED_LOCALES","packageSpecificationSchema","Timestamp","db","convertJSToFirestore","convertFirestoreToJS","HubbyModelSchema"],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { Timestamp } from 'firebase-admin/firestore';\nimport type { FieldSpec } from '../types';\nimport { wrapZodSchema, wrapObjectSchema, wrapPlainObjectSchema, isSchemaSpec } from '../common';\nimport { db } from '../services/firebase';\n\nexport const buildServerSchema = (spec: FieldSpec, path: string[] = []): z.ZodTypeAny => {\n  const pathString = path.join('.');\n\n  if (spec === undefined || spec === null) {\n    throw new Error(`Invalid spec at \"${pathString || '<root>'}\": received ${spec}`);\n  }\n\n  // ----- Zod schema passed directly -----\n  if (spec instanceof z.ZodType) {\n    return wrapZodSchema(spec);\n  }\n\n  // ----- Array -----\n  if ('_type' in spec && spec._type === 'array') {\n    if (!('of' in spec)) {\n      throw new Error(`Array spec at \"${pathString}\" is missing 'of'`);\n    }\n\n    const itemSchema =\n      spec.of instanceof z.ZodType\n        ? spec.of\n        : buildServerSchema(spec.of, [...path, '[i]']);\n\n    let arraySchema = z.array(itemSchema);\n    if (spec.nullable) arraySchema = arraySchema.nullable();\n    if (spec.optional) arraySchema = arraySchema.optional();\n    return arraySchema;\n  }\n\n  // ----- Record -----\n  if ('_type' in spec && spec._type === 'record') {\n    if (!('of' in spec)) {\n      throw new Error(`Record spec at \"${pathString}\" is missing 'of'`);\n    }\n\n    const valueSchema =\n      spec.of instanceof z.ZodType\n        ? spec.of\n        : buildServerSchema(spec.of, [...path, '[key]']);\n\n    let recordSchema = z.record(valueSchema);\n    if (spec.nullable) recordSchema = recordSchema.nullable();\n    if (spec.optional) recordSchema = recordSchema.optional();\n    return recordSchema;\n  }\n\n  // ----- Timestamp -----\n  if ('_type' in spec && spec._type === 'timestamp') {\n    let tsSchema = z.date().transform(date => Timestamp.fromDate(date));\n    if (spec.nullable) tsSchema = tsSchema.nullable();\n    if (spec.optional) tsSchema = tsSchema.optional();\n    return tsSchema;\n  }\n\n  // ----- Document Reference -----\n  if ('_type' in spec && spec._type === 'docRef') {\n    let refSchema = z.string().transform(id => db.doc(`${spec.collection}/${id}`));\n    if (spec.nullable) refSchema = refSchema.nullable();\n    if (spec.optional) refSchema = refSchema.optional();\n    return refSchema;\n  }\n\n  // ----- Nested object shape -----\n  if (typeof spec === 'object' && !('_type' in spec)) {\n    const shape: Record<string, z.ZodTypeAny> = {};\n    for (const [key, val] of Object.entries(spec)) {\n      shape[key] = buildServerSchema(val, [...path, key]);\n    }\n    return z.object(shape);\n  }\n\n  // ----- Object -----\n  if (\n    typeof spec === 'object' &&\n    '_type' in spec &&\n    spec._type === 'object' &&\n    'of' in spec\n  ) {\n    return wrapObjectSchema(spec, path, buildServerSchema);\n  }\n\n  // ----- Plain object shape -----\n  if (isSchemaSpec(spec) || typeof spec === 'object' && '_type' in spec && spec._type === 'object') {\n    return wrapPlainObjectSchema(spec, path, buildServerSchema);\n  }\n\n  // ----- Unknown or malformed spec -----\n  throw new Error(`Unknown or malformed spec at \"${pathString}\": ${JSON.stringify(spec)}`);\n};\n","import { ZodTypeAny, z } from 'zod';\nimport type { SchemaBuilder } from './types';\n\n/**\n * Ensures a Zod schema is wrapped to be optional and/or nullable,\n * if not already. Use this in recursive schema builders.\n * Also applies any other supported schema transformations provided in options.\n */\nexport function wrapZodSchema(\n    schema: ZodTypeAny,\n    options?: {\n        optional?: boolean;\n        nullable?: boolean;\n        min?: number;\n        max?: number;\n        // Allow arbitrary extensions via dynamic property\n        [key: string]: any;\n    }\n): ZodTypeAny {\n    if (!options) return schema;\n\n    let wrapped = schema;\n\n    // Handle nullable and optional specially since they're common\n    if (options.nullable && !wrapped.isNullable?.()) {\n        wrapped = wrapped.nullable();\n    }\n\n    if (options.optional && !wrapped.isOptional?.()) {\n        wrapped = wrapped.optional();\n    }\n\n    // Process all other options dynamically\n    for (const [key, value] of Object.entries(options)) {\n        // Skip the already handled properties and undefined values\n        if (['nullable', 'optional'].includes(key) || value === undefined) {\n            continue;\n        }\n\n        // Check if the schema has a method matching the option key\n        if (typeof (wrapped as any)[key] === 'function') {\n            wrapped = (wrapped as any)[key](value);\n        }\n    }\n\n    return wrapped;\n}\n\nexport function wrapObjectSchema(\n    spec: any, // using any to support dynamic `spec.type === 'object'`\n    path: string[],\n    builder: SchemaBuilder\n): ZodTypeAny {\n    const pathString = path.join('.');\n\n    if (!('of' in spec)) {\n        throw new Error(`Object spec at \"${pathString}\" is missing 'of'`);\n    }\n\n    const shape: Record<string, ZodTypeAny> = {};\n    for (const [key, value] of Object.entries(spec.of)) {\n        shape[key] = builder(value as any, [...path, key]);\n    }\n\n    let objectSchema: ZodTypeAny = z.object(shape);\n    if (spec.nullable) objectSchema = objectSchema.nullable();\n    if (spec.optional) objectSchema = objectSchema.optional();\n    return objectSchema;\n}\n\n/**\n * Wraps a plain object shape (no `type: 'object'`) into a Zod schema.\n * Assumes each field is either a Zod schema or another FieldSpec.\n */\nexport function wrapPlainObjectSchema(\n    spec: Record<string, any>,\n    path: string[],\n    builder: SchemaBuilder\n): ZodTypeAny {\n    const pathString = path.join('.');\n\n    // Handle object field specs with '_type': 'object'\n    if ('_type' in spec && spec._type === 'object' && 'of' in spec) {\n        return wrapObjectSchema(spec, path, builder);\n    }\n\n    const shape: Record<string, ZodTypeAny> = {};\n\n    // Only add fields to the schema if they're not special control properties\n    for (const [key, val] of Object.entries(spec)) {\n        if (key !== '_type' && key !== 'nullable' && key !== 'optional') {\n            shape[key] = builder(val, [...path, key]);\n        }\n    }\n\n    // Create the base object schema\n    let schema: ZodTypeAny = z.object(shape);\n\n    // Apply nullable/optional modifiers if needed\n    if ('nullable' in spec && spec.nullable === true) {\n        schema = schema.nullable();\n    }\n\n    if ('optional' in spec && spec.optional === true) {\n        schema = schema.optional();\n    }\n\n    return schema;\n}\n\nexport const SCHEMA_MARKER = Symbol('ZodSchemaSpecMarker');\n\nexport function markAsSchemaSpec<T extends object>(spec: T): T {\n    Object.defineProperty(spec, SCHEMA_MARKER, {\n        value: true,\n        enumerable: false,\n        configurable: false,\n        writable: false,\n    });\n    return spec;\n}\n\nexport function isSchemaSpec(obj: unknown): obj is Record<string, any> {\n    return typeof obj === 'object' && obj !== null && SCHEMA_MARKER in obj;\n}","import { getApps, initializeApp, cert, AppOptions, App } from \"firebase-admin/app\";\nimport { getFirestore, Firestore } from \"firebase-admin/firestore\";\nimport { applicationDefault } from \"firebase-admin/app\";\n\nexport interface FirebaseConfig {\n  credential?: AppOptions['credential'];\n  projectId?: string;\n  storageBucket?: string;\n  databaseURL?: string;\n  // Options for testing\n  isTest?: boolean;\n}\n\n// Define variable to hold singleton instance\nlet defaultInstance: FirebaseService | null = null;\n\nexport class FirebaseService {\n  private app: App;\n  private firestoreInstance: Firestore;\n\n  constructor(config: FirebaseConfig = {}) {\n    // Use default credentials if none provided\n    const options: AppOptions = {\n      credential: config.credential || applicationDefault(),\n      projectId: config.projectId || process.env.FIREBASE_PROJECT_ID,\n      storageBucket: config.storageBucket,\n      databaseURL: config.databaseURL\n    };\n\n    // For test environments, we may want to use a different initialization strategy\n    if (config.isTest) {\n      // Check if we already have apps initialized - reuse if available\n      if (getApps().length) {\n        this.app = getApps()[0];\n      } else {\n        this.app = initializeApp(options);\n      }\n    } else {\n      // Standard initialization for non-test environments\n      if (!getApps().length) {\n        this.app = initializeApp(options);\n      } else {\n        this.app = getApps()[0];\n      }\n    }\n\n    this.firestoreInstance = getFirestore(this.app);\n  }\n\n  get firestore(): Firestore {\n    return this.firestoreInstance;\n  }\n\n  // Get default instance with singleton pattern\n  public static getDefaultInstance(): FirebaseService {\n    if (!defaultInstance) {\n      defaultInstance = new FirebaseService();\n    }\n    return defaultInstance;\n  }\n\n  // Allow for setting a custom default instance (useful for tests)\n  public static setDefaultInstance(instance: FirebaseService): void {\n    defaultInstance = instance;\n  }\n}\n\n// For backward compatibility, export a default instance\nconst defaultService = FirebaseService.getDefaultInstance();\nexport const db = defaultService.firestore;\n\n// Function to create a new Firebase service instance\nexport function createFirebaseService(config?: FirebaseConfig): FirebaseService {\n  return new FirebaseService(config);\n}","import { z } from 'zod';\nimport { PARTNER_COLLECTION, PROFILE_COLLECTION, timestampNullableOptional, timestampRequired, timestampNullable } from './common';\nimport { markAsSchemaSpec } from '../common'\n\nexport const apiKeySpec = {\n    expires_at: { _type: 'timestamp' as const },\n    secret: z.string(),\n    is_active: z.boolean(),\n}\n\nexport const apiKeysSpec = {\n    _type: 'record' as const,\n    of: {\n        _type: 'object' as const,\n        of: apiKeySpec\n    }\n}\n\nexport const apiKeysObjectSpec = {\n    _type: 'object' as const,\n    of: {\n        allowed_keys: { _type: 'array' as const, nullable: true, optional: true, of: z.string() },\n        keys: apiKeysSpec\n    },\n    nullable: true,\n    optional: true\n}\n\nexport const userSchemaSpec = markAsSchemaSpec({\n    id: z.string().nullable().optional(),\n    name: z.string().nullable(),\n    email: z.string().email().nullable(),\n    stripe_id: z.string().nullable().optional(),\n    referral: z.string().nullable().optional(),\n    fcm: z.string().optional(),\n    deeplink: z.string().nullable().optional(),\n    gender: z.string().nullable().optional(),\n    company: z.string().nullable().optional(),\n    coordinates: z.string().nullable().optional(),\n    parameters: z.any().nullable().optional(),\n    locale: z.string().nullable().optional(),\n    phone_model: z.string().nullable().optional(),\n    phone_os: z.string().nullable().optional(),\n    phone_os_version: z.string().nullable().optional(),\n    ios: z.boolean().nullable().optional(),\n    has_card_saved: z.boolean().nullable().optional(),\n    admin: z.boolean().nullable().optional(),\n    api_keys: apiKeysObjectSpec,\n    currency: z.string().nullable().optional(),\n    receipt_email: z.string().nullable().optional(),\n    source: z.enum(['direct', 'promo', 'platform']).nullable().optional(),\n    role: z.array(z.enum(['admin', 'user', 'platform'])).nullable().optional(),\n    balance: z.number().nullable().optional(),\n    createdAt: { _type: 'timestamp' as const },\n    partner: { _type: 'docRef' as const, collection: PARTNER_COLLECTION, optional: true, nullable: true },\n    profileRef: { _type: 'docRef' as const, collection: PROFILE_COLLECTION, optional: true, nullable: true },\n    review_requested: timestampNullableOptional,\n    last_seen: timestampNullableOptional\n});","import { z } from 'zod';\nimport { markAsSchemaSpec } from '../common';\n\n// Collection paths\nexport const PARTNER_COLLECTION = '/companies/hubby/partners';\nexport const USER_COLLECTION = 'users';\nexport const PROFILE_COLLECTION = '/companies/hubby/profiles';\nexport const PACKAGE_COLLECTION = '/companies/hubby/packages';\nexport const PROMO_CODE_COLLECTION = '/companies/hubby/promo_codes';\nexport const COUNTRY_COLLECTION = 'countries';\nexport const ESIM_COLLECTION = 'esims';\nexport const PAYMENT_COLLECTION = 'payments';\nexport const PRICE_LIST_COLLECTION = 'price_lists';\nexport const BOOKING_COLLECTION = 'bookings';\nexport const MESSAGE_COLLECTION = 'messages';\nexport const CURRENCY_COLLECTION = 'currencies';\nexport const API_LOG_COLLECTION = 'api_logs'\nexport const timestampNullableOptional = { _type: 'timestamp' as const, nullable: true, optional: true };\nexport const timestampNullable = { _type: 'timestamp' as const, nullable: true, optional: false };\nexport const timestampRequired = { _type: 'timestamp' as const, nullable: false, optional: false };\n\nexport const hubbyModelSpec = {\n    id: z.string().nullable().optional(),\n    created_at: timestampRequired,\n    updated_at: timestampNullableOptional,\n    created_by: { _type: 'docRef' as const, collection: 'users', nullable: true, optional: true },\n    updated_by: { _type: 'docRef' as const, collection: 'users', nullable: true, optional: true },\n}\n\nexport const tagModelSpec = {\n    ...hubbyModelSpec,\n    slug: z.string(),\n    name: z.string(),\n    description: z.string().nullable().optional(),\n    color: z.string().nullable().optional(),\n}\n\nexport const SUPPORTED_LOCALES = [\n    'en-US',\n    'en-EU',\n    'en-GB',\n    'nl-NL',\n    'de-DE',\n    'fr-FR',\n    'it-IT',\n    'es-ES',\n    'cs-CZ',\n    'pl-PL',\n    'pt-PT',\n    'fr-BE',\n    'nl-BE',\n    'de-AT',\n    'de-CH',\n    'fr-CH',\n    'it-CH',\n    'sv-SE',\n    'sk-SK',\n    'de-BE',\n    'en-AU'\n] as const;\n\n// Define the type using TypeScript's typeof and indexing\nexport type SupportedLocales = typeof SUPPORTED_LOCALES[number];","import { z } from 'zod';\nimport {\n    PARTNER_COLLECTION,\n    PROMO_CODE_COLLECTION,\n    USER_COLLECTION,\n    ESIM_COLLECTION,\n    timestampNullable,\n    timestampRequired\n} from './common';\nimport { markAsSchemaSpec } from '../common';\nimport { supportedLocalesSchema } from '../constants';\n\n// Enum for communication channels\nexport const communicationChannelSchema = z.enum([\n    'EMAIL',\n    'WHATSAPP',\n    'PUSH_NOTIFICATION',\n    'SMS'\n]);\nexport type CommunicationChannelType = z.infer<typeof communicationChannelSchema>;\n\n// For backward compatibility\nexport type CommunicationChannel = CommunicationChannelType;\n\n// Add enum-like object for use in code\nexport const CommunicationChannel = {\n    EMAIL: 'EMAIL' as const,\n    WHATSAPP: 'WHATSAPP' as const,\n    PUSH_NOTIFICATION: 'PUSH_NOTIFICATION' as const,\n    SMS: 'SMS' as const\n} as const;\n\n// Status type for bookings\nexport const bookingStatusSchema = z.enum([\n    'PENDING',\n    'CONFIRMED',\n    'COMPLETED',\n    'CANCELLED',\n    'UNPAID',\n    'EXPIRED'\n]);\nexport type BookingStatus = z.infer<typeof bookingStatusSchema>;\n\n// Communication options schema\nexport const communicationOptionsSchema = z.object({\n    should_send_message: z.boolean(),\n    channels: z.array(communicationChannelSchema)\n});\n\nexport type CommunicationOptions = z.infer<typeof communicationOptionsSchema>;\n\n// Define the booking schema spec\nexport const bookingSchemaSpec = markAsSchemaSpec({\n    id: z.string(),\n    external_id: z.string().nullable().optional(),\n    created_at: timestampRequired,\n    updated_at: timestampRequired,\n    created_by: z.string().nullable(),\n    updated_by: z.string().nullable(),\n    title: z.string().nullable(),\n    first_name: z.string(),\n    last_name: z.string(),\n    full_name: z.string(),\n    pax: z.number(),\n    email: z.string().email().nullable(),\n    phone: z.string().nullable(),\n    booking_id: z.string().nullable(),\n    flight_number: z.string().optional(),\n    gender: z.enum(['M', 'F', 'O']).optional(),\n    package_size: z.string().optional(),\n    sent_messages: z.record(z.any()).optional(),\n    locale: supportedLocalesSchema,\n    status: bookingStatusSchema,\n    data: {\n        _type: 'object' as const,\n        of: {\n            source: z.string(),\n            manual: z.boolean()\n        }\n    },\n    communication_options: {\n        _type: 'object' as const,\n        of: {\n            should_send_message: z.boolean(),\n            channels: {\n                _type: 'array' as const,\n                of: communicationChannelSchema\n            }\n        }\n    },\n    is_processed_for_esim_restoration: z.boolean(),\n    is_pseudonymized: z.boolean(),\n    import_id: z.string().nullable().optional(),\n    package_specifications: z.record(z.any()).optional(),\n    departure_date: timestampRequired,\n    return_date: timestampNullable,\n    partner: { _type: 'docRef' as const, collection: PARTNER_COLLECTION },\n    promo_codes: {\n        _type: 'array' as const,\n        of: { _type: 'docRef' as const, collection: PROMO_CODE_COLLECTION }\n    },\n    users: {\n        _type: 'array' as const,\n        of: { _type: 'docRef' as const, collection: USER_COLLECTION },\n        nullable: true\n    },\n    esims: {\n        _type: 'array' as const,\n        of: { _type: 'docRef' as const, collection: ESIM_COLLECTION },\n        nullable: true\n    }\n});\n\n","import { z } from 'zod';\n\nexport const SUPPORTED_LOCALES = [\n    'en-US',\n    'en-GB',\n    'nl-NL',\n    'de-DE',\n    'fr-FR',\n    'it-IT',\n    'es-ES',\n    'cs-CZ',\n    'pl-PL',\n    'pt-PT',\n    'fr-BE',\n    'nl-BE',\n    'de-AT',\n    'de-CH',\n    'fr-CH',\n    'it-CH',\n    'sv-SE',\n    'sk-SK',\n    'de-BE',\n    'en-AU'\n] as const;\n\n// Define the type using TypeScript's typeof and indexing\nexport type SupportedLocales = typeof SUPPORTED_LOCALES[number];\n\n// Create a Zod schema for validation\nexport const supportedLocalesSchema = z.enum(SUPPORTED_LOCALES);\n\n// Type inference from the schema (alternative way to define the type)\nexport type SupportedLocalesFromSchema = z.infer<typeof supportedLocalesSchema>; ","import { z } from 'zod';\nimport { markAsSchemaSpec } from '../common';\n\n// Country schema spec\nexport const countrySchemaSpec = markAsSchemaSpec({\n    id: z.string().nullable(),\n    bokun_id: z.number().nullable(),\n    LTE: z.boolean().nullable(),\n    apn: z.string().nullable(),\n    click_count: z.number().nullable(),\n    global_network: z.string().nullable(),\n    global_price: z.number().nullable(),\n    hubby: z.number().nullable(),\n    imsi: z.number().nullable(),\n    has_esim: z.boolean(),\n    name: z.string().nullable(),\n    region: z.boolean().nullable(),\n    is_region: z.boolean().nullable(),\n    countries: z.array(z.string()).nullable(),\n    tier: z.number().nullable()\n});\n","import { z } from 'zod';\nimport { markAsSchemaSpec } from '../common';\nimport { timestampRequired } from './common';\n\n// Define schema for conversion rates (for backward compatibility)\nexport const conversionRateSchema = z.object({\n    currency: z.number()\n});\n\nexport type CoversionRate = z.infer<typeof conversionRateSchema>;\n\n// Define the currency schema spec\nexport const currencySchemaSpec = markAsSchemaSpec({\n    id: z.string(),\n    created_at: timestampRequired,\n    updated_at: timestampRequired,\n    created_by: z.string().nullable(),\n    updated_by: z.string().nullable(),\n    // ISO 4217 currency code (e.g., \"USD\", \"EUR\")\n    code: z.string().describe('ISO 4217 currency code (e.g., \"USD\", \"EUR\")'),\n    // Currency symbol (e.g., \"$\", \"€\")\n    symbol: z.string().describe('Currency symbol (e.g., \"$\", \"€\")'),\n    // Full name of the currency (e.g., \"US Dollar\")\n    name: z.string().describe('Full name of the currency (e.g., \"US Dollar\")'),\n    // Exchange rate relative to base currency\n    rate: z.number().describe('Exchange rate relative to base currency'),\n    // Whether this is the default currency\n    is_default: z.boolean().describe('Whether this is the default currency')\n});\n","import { z } from 'zod';\nimport { markAsSchemaSpec } from '../common';\nimport {\n    COUNTRY_COLLECTION,\n    USER_COLLECTION,\n    PARTNER_COLLECTION,\n    PAYMENT_COLLECTION,\n    timestampNullable,\n    timestampRequired\n} from './common';\n\n// Define the eSIM schema spec\nexport const esimSchemaSpec = markAsSchemaSpec({\n    id: z.string(),\n    created_at: timestampRequired,\n    updated_at: timestampRequired,\n    created_by: z.string().nullable(),\n    updated_by: z.string().nullable(),\n\n    // Common eSIM fields\n    imsi: z.number(),\n    qr: z.string(),\n    iccid: z.string(),\n    provider: z.string(),\n    coverage_label: z.string().nullable().optional(),\n    total_data: z.number(),\n    data_left: z.number(),\n    data_used: z.boolean(),\n    status: z.string().nullable(),\n    name: z.string(),\n    android_auto: z.boolean(),\n    partner_price: z.number().nullable(),\n    promo: z.string().nullable(),\n    type: z.enum(['api', 'promo', 'balance', 'code', 'external', 'payment']),\n    is_auto_install: z.boolean(),\n    is_archived: z.boolean(),\n    user: z.string().nullable(),\n    payment: z.string().nullable(),\n    apn: z.string().nullable(),\n\n    // Reference fields\n    country: { _type: 'docRef' as const, collection: COUNTRY_COLLECTION, nullable: true },\n    partner: { _type: 'docRef' as const, collection: PARTNER_COLLECTION, nullable: true },\n\n    // Timestamp fields\n    time_assigned: timestampNullable,\n    last_updated: timestampNullable\n});\n","import { z } from 'zod';\nimport { markAsSchemaSpec } from '../common';\nimport {\n    USER_COLLECTION,\n    timestampRequired\n} from './common';\n\n// Define the payment schema spec\nexport const paymentSchemaSpec = markAsSchemaSpec({\n    id: z.string(),\n    created_at: timestampRequired,\n    updated_at: timestampRequired,\n    created_by: z.string().nullable(),\n    updated_by: z.string().nullable(),\n\n    // Payment specific fields\n    amount: z.number(),\n    customer: z.string(),\n    date: timestampRequired,\n    iccid: z.string(),\n    package: z.string(),\n    promo: z.string(),\n    topup: z.boolean(),\n\n    // Reference fields\n    user: { _type: 'docRef' as const, collection: USER_COLLECTION, nullable: true }\n});\n","import { z } from 'zod';\nimport { markAsSchemaSpec } from '../common';\nimport { hubbyModelSpec, PARTNER_COLLECTION } from './common';\n\n// Country schema spec\nexport const analyticsSpec = markAsSchemaSpec({\n    ...hubbyModelSpec,\n    service: z.string(),\n    date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/), // YYYY-MM-DD\n    partner: { _type: 'docRef' as const, collection: PARTNER_COLLECTION, nullable: true },\n    event: z.string(),\n    parameter: z.string().nullable(),\n    sum: z.number(),\n});","import { z } from 'zod';\nimport { markAsSchemaSpec } from '../common';\nimport { timestampRequired } from './common';\n\n// Define the message schema spec\nexport const messageSchemaSpec = markAsSchemaSpec({\n    id: z.string(),\n    key: z.string(),\n    method: z.enum([\"push\", \"sms\", \"email\"]),\n    status: z.enum([\"pending\", \"sent\", \"failed\", \"delivered\"]),\n    created_at: timestampRequired,\n    updated_at: timestampRequired\n});\n\n","import { z } from 'zod';\nimport { markAsSchemaSpec } from '../common';\nimport {\n    COUNTRY_COLLECTION,\n    PARTNER_COLLECTION,\n    timestampRequired\n} from './common';\n\n// Define the package schema spec\nexport const packageSchemaSpec = markAsSchemaSpec({\n    id: z.string(),\n    created_at: timestampRequired,\n    updated_at: timestampRequired,\n    created_by: z.string().nullable(),\n    updated_by: z.string().nullable(),\n\n    // Package specific fields\n    external_id: z.string(),\n    provider: z.string(),\n    coverage_label: z.string().nullable(),\n    label: z.string(),\n    bytes: z.number(),\n    hidden: z.boolean(),\n    is_hidden: z.boolean(),\n    is_active: z.boolean(),\n    priority: z.number(),\n    price: z.number(),\n    partner_price: z.number(),\n    days: z.number(),\n    name: z.string(),\n    type: z.enum(['data-limited', 'time-limited']).nullable(),\n    throttling: z.number().optional(),\n    provider_parameters: z.object({\n        imsi: z.number()\n    }).nullable(),\n\n    // Reference fields\n    country: { _type: 'docRef' as const, collection: COUNTRY_COLLECTION },\n    partner: { _type: 'docRef' as const, collection: PARTNER_COLLECTION, nullable: true },\n\n    // Nested country data - need to use dynamic reference to country schema\n    // This would typically be handled better with a proper recursive schema definition\n    // but for simplicity, we're using any type here\n    country_data: z.any().nullable()\n});\n","import { z } from 'zod';\nimport { markAsSchemaSpec } from '../common';\nimport {\n    PARTNER_COLLECTION,\n    COUNTRY_COLLECTION,\n    PACKAGE_COLLECTION,\n    BOOKING_COLLECTION,\n    PROMO_CODE_COLLECTION,\n    timestampRequired,\n    timestampNullableOptional\n} from './common';\n\n// Define package specification schema for use in promo code\nexport const packageSpecificationSchema = z.object({\n    destination: z.string().optional(),\n    size: z.string().optional(),\n    package_id: z.string().optional(),\n    iata_code: z.string().optional()\n});\n\n// Define the promo code schema spec\nexport const promoCodeSchemaSpec = markAsSchemaSpec({\n    id: z.string(),\n    redeemed_at: timestampNullableOptional,\n    created_at: timestampRequired,\n    updated_at: timestampRequired,\n    created_by: z.string().nullable(),\n    updated_by: z.string().nullable(),\n\n    // PromoCode specific fields\n    external_id: z.string(),\n    code: z.string(),\n    allowance_user: z.number(),\n    allowance_total: z.number(),\n    type: z.enum(['full-discount', 'partial-discount', 'booking', 'traveler']).nullable().or(z.string()),\n    usage: z.array(z.string()),\n    uuid_usage: z.array(z.string()),\n    package_specification: packageSpecificationSchema.optional(),\n    valid_from: timestampRequired,\n    valid_to: timestampRequired,\n\n    // Reference fields\n    partner: { _type: 'docRef' as const, collection: PARTNER_COLLECTION, nullable: true },\n    package: { _type: 'docRef' as const, collection: PACKAGE_COLLECTION, nullable: true },\n    country: { _type: 'docRef' as const, collection: COUNTRY_COLLECTION, nullable: true },\n    booking: { _type: 'docRef' as const, collection: BOOKING_COLLECTION, nullable: true },\n\n    // Optional fields based on the type\n    discount: z.number().optional(),\n    package_size: z.string().optional(),\n    countries: z.array(z.string()).optional(),\n    max_bytes: z.number().optional(),\n    starter_data: z.number().optional()\n});","import { z, ZodLazy } from 'zod';\nimport { markAsSchemaSpec } from '../common';\nimport { supportedLocalesSchema, SUPPORTED_LOCALES, SupportedLocales } from '../constants';\nimport {\n    PARTNER_COLLECTION,\n    USER_COLLECTION,\n    PACKAGE_COLLECTION,\n    PRICE_LIST_COLLECTION,\n    tagModelSpec,\n    timestampRequired,\n    timestampNullableOptional\n} from './common';\n\n// ===== Helper schemas for nested structures =====\n\n// Address schema\nexport const addressSchema = z.object({\n    street: z.string().nullable().optional(),\n    city: z.string().nullable().optional(),\n    postal_code: z.string().nullable().optional(),\n    country: z.string().nullable().optional()\n});\n\n// Emit event schema\nexport const emitEventSchema = z.object({\n    topup: z.boolean().optional().default(false),\n    redemption: z.boolean().optional().default(false),\n    activation: z.boolean().optional().default(false),\n    depletion: z.boolean().optional().default(false),\n});\n\n// Registration schema\nexport const registrationSchema = z.object({\n    chamber_of_commerce_number: z.string().nullable().optional(),\n    vat_number: z.string().nullable().optional(),\n    anvr_number: z.number().nullable().optional(),\n    tax_number: z.string().nullable().optional()\n});\n\n// Banking details schema\nexport const bankingDetailsSchema = z.object({\n    account_holder: z.string().nullable().optional(),\n    bank_name: z.string().nullable().optional(),\n    iban: z.string().nullable().optional()\n});\n\n// Package price schema\nexport const packagePriceSchema = z.object({\n    destination: z.string(),\n    label: z.string(),\n    type: z.enum(['data-limited', 'time-limited']),\n    price: z.number(),\n    package: z.object({ _type: z.literal('docRef'), collection: z.literal(PACKAGE_COLLECTION) })\n});\n\n// Package specification schema\nexport const packageSpecificationSchema = z.object({\n    size: z.string().nullable().optional(),\n    type: z.string().nullable().optional(),\n    destination: z.string().nullable().optional()\n});\n\n// Pricing strategy schema\nexport const pricingStrategySchema = z.object({\n    strategy: z.enum(['split', 'bundle']),\n    modification_percentage: z.number(),\n    default_price_list: z.object({\n        _type: z.literal('docRef'),\n        collection: z.literal(PRICE_LIST_COLLECTION),\n        nullable: z.literal(true)\n    }),\n    custom_prices: z.array(packagePriceSchema)\n});\n\n// Visual identity banner schema\nexport const visualIdentityBannerSchema = z.object({\n    image_url: z.string(),\n    alt: z.string(),\n    click_url: z.string(),\n    locale: supportedLocalesSchema,\n    properties: z.record(z.string())\n});\n\n// Schedule filter schema\nexport const scheduleFilterSchema = z.object({\n    type: z.enum(['iso3', 'gender', 'percentage', 'age']),\n    value: z.union([z.string(), z.number()]),\n    comparison: z.enum([\n        'equal',\n        'not_equal',\n        'greater_than',\n        'less_than',\n        'greater_than_or_equal',\n        'less_than_or_equal'\n    ])\n});\n\n// Convert object-like schemas to proper Zod objects\nexport const visualIdentityBannersSchema = z.object({\n    strategy: z.enum(['fixed', 'rotating', 'destination', 'time_of_day']),\n    banners: z.array(visualIdentityBannerSchema).nullable().optional()\n});\n\nexport const visualIdentitySchema = z.object({\n    primary_color: z.string(),\n    secondary_color: z.string(),\n    logo: z.string(),\n    font: z.string().nullable().optional(),\n    top_banner: visualIdentityBannersSchema.optional(),\n    mid_banner: visualIdentityBannersSchema.optional()\n});\n\n// Partner contact schema\nexport const partnerContactSchema = z.object({\n    email: z.string().nullable(),\n    office_phone: z.string().nullable().optional()\n});\n\n// Partner data schema\nexport const partnerDataSchema = z.object({\n    source: z.string(),\n    manual: z.boolean()\n});\n\n// Package strategy schema\nexport const packageStrategySchema = z.object({\n    name: z.string(),\n    iso3_white_list: z.array(z.string()).optional(),\n    parameters: z.any()\n});\n\n// Schedule email schema\nexport const scheduleEmailSchema = z.object({\n    brevo_template_id: z.number(),\n    subject: z.record(z.string()).refine(\n        (val: Record<string, string>) => Object.keys(val).every(key => SUPPORTED_LOCALES.includes(key as SupportedLocales)),\n        { message: \"Keys must be supported locales\" }\n    ).optional(),\n    preview_text: z.record(z.string()).refine(\n        (val: Record<string, string>) => Object.keys(val).every(key => SUPPORTED_LOCALES.includes(key as SupportedLocales)),\n        { message: \"Keys must be supported locales\" }\n    ).optional()\n}).nullable().optional();\n\n// Schedule push schema\nexport const schedulePushSchema = z.object({\n    title: z.record(z.string()).optional(),\n    body: z.record(z.string()).optional(),\n    target: z.string()\n}).nullable().optional();\n\n// Schedule schema\nexport const scheduleSchema = z.object({\n    days: z.number(),\n    email: scheduleEmailSchema,\n    push: schedulePushSchema,\n    hour: z.number(),\n    key: z.string(),\n    method: z.enum(['email', 'sms', 'whatsapp', 'push']),\n    moment: z.enum(['departure_date', 'return_date', 'immediate']),\n    filter: scheduleFilterSchema.nullable().optional()\n});\n\nexport const freeEsimSchema = z.object({\n    package_specification: z.object({\n        size: z.string(),\n        type: z.string(),\n        destination: z.string()\n    }),\n    booking_id_verification: z.boolean().default(false),\n    booking_id_verification_pattern: z.string().nullable().optional(),\n    allowance: z.number()\n});\n\n// Platform settings schema\nexport const platformSettingsSchema = z.object({\n    package_strategy: z.object({\n        name: z.string(),\n        iso3_white_list: z.array(z.string()).optional(),\n        parameters: z.any()\n    }).nullable().optional(),\n    free_esim: freeEsimSchema.nullable().optional(),\n    booking_defaults: z.object({\n        locale: supportedLocalesSchema\n    }).nullable().optional(),\n    booking_confirmation: z.object({\n        brevo_template_id: z.number(),\n        send_booking_confirmation: z.boolean()\n    }).nullable().optional(),\n    emit_events: emitEventSchema.nullable().optional(),\n    schedules: z.array(scheduleSchema).optional()\n});\n\n// ===== Exportable schema specs =====\n\n// Package price schema spec\nexport const packagePriceSchemaSpec = markAsSchemaSpec({\n    destination: z.string(),\n    label: z.string(),\n    type: z.enum(['data-limited', 'time-limited']),\n    price: z.number(),\n    package: { _type: 'docRef' as const, collection: PACKAGE_COLLECTION }\n});\n\n// Financial properties schema spec\nexport const financialPropertiesSchemaSpec = markAsSchemaSpec({\n    administration_fee: z.number().nullable(),\n    income_per_gb: z.number().nullable(),\n    commission_fee: z.number().nullable().optional(),\n    payment_method: z.enum(['invoice', 'direct']),\n    requires_card: z.boolean().nullable(),\n    next_invoice: timestampNullableOptional,\n    last_invoice: timestampNullableOptional,\n    pricing_strategies: {\n        _type: 'object' as const,\n        of: {\n            partner: {\n                _type: 'object' as const,\n                of: {\n                    strategy: z.enum(['split', 'bundle']),\n                    modification_percentage: z.number(),\n                    default_price_list: { _type: 'docRef' as const, collection: PRICE_LIST_COLLECTION, nullable: true },\n                    custom_prices: {\n                        _type: 'array' as const,\n                        of: {\n                            _type: 'object' as const,\n                            of: {\n                                destination: z.string(),\n                                label: z.string(),\n                                type: z.enum(['data-limited', 'time-limited']),\n                                price: z.number(),\n                                package: { _type: 'docRef' as const, collection: PACKAGE_COLLECTION }\n                            }\n                        }\n                    }\n                },\n                optional: true\n            },\n            user: {\n                _type: 'object' as const,\n                of: {\n                    modification_percentage: z.number(),\n                    default_price_list: { _type: 'docRef' as const, collection: PRICE_LIST_COLLECTION, nullable: true },\n                    custom_prices: {\n                        _type: 'array' as const,\n                        of: {\n                            _type: 'object' as const,\n                            of: {\n                                destination: z.string(),\n                                label: z.string(),\n                                type: z.enum(['data-limited', 'time-limited']),\n                                price: z.number(),\n                                package: { _type: 'docRef' as const, collection: PACKAGE_COLLECTION }\n                            }\n                        }\n                    }\n                },\n                optional: true\n            }\n        },\n        nullable: true\n    }\n});\n\n// Platform settings schema spec\nexport const platformSettingsSchemaSpec = markAsSchemaSpec({\n    package_strategy: {\n        _type: 'object' as const,\n        of: packageStrategySchema.shape,\n        nullable: true,\n        optional: true\n    },\n    free_esim: {\n        _type: 'object' as const,\n        of: freeEsimSchema.shape,\n        nullable: true,\n        optional: true\n    },\n    booking_defaults: {\n        _type: 'object' as const,\n        of: {\n            locale: supportedLocalesSchema\n        },\n        nullable: true,\n        optional: true\n    },\n    booking_confirmation: {\n        _type: 'object' as const,\n        of: {\n            brevo_template_id: z.number(),\n            send_booking_confirmation: z.boolean()\n        },\n        nullable: true,\n        optional: true\n    },\n    schedules: {\n        _type: 'array' as const,\n        of: {\n            _type: 'object' as const,\n            of: scheduleSchema.shape\n        },\n        optional: true\n    }\n});\n\n// ===== Main partner schema =====\nexport const partnerSchemaSpec = markAsSchemaSpec({\n    // Base model fields\n    id: z.string(),\n    created_at: timestampRequired,\n    updated_at: timestampRequired,\n    created_by: z.string().nullable(),\n    updated_by: z.string().nullable(),\n\n    // Partner specific fields\n    name: z.string().min(3),\n    type: z.string().nullable(),\n    is_active: z.boolean().nullable().optional(),\n    external_id: z.string().nullable().optional(),\n\n    // Complex nested objects\n    contact: {\n        _type: 'object' as const,\n        of: partnerContactSchema.shape,\n        nullable: true\n    },\n    address: {\n        _type: 'object' as const,\n        of: addressSchema.shape,\n        nullable: true\n    },\n    registration: {\n        _type: 'object' as const,\n        of: registrationSchema.shape,\n        nullable: true\n    },\n    banking_details: {\n        _type: 'object' as const,\n        of: bankingDetailsSchema.shape,\n        nullable: true\n    },\n\n    // Reference fields\n    parent: { _type: 'docRef' as const, collection: PARTNER_COLLECTION, nullable: true },\n    users: { _type: 'array' as const, of: { _type: 'docRef' as const, collection: USER_COLLECTION }, nullable: true },\n\n    // Complex nested structures\n    financial_properties: financialPropertiesSchemaSpec,\n    // Visual identity\n    visual_identity: {\n        _type: 'object' as const,\n        of: visualIdentitySchema.shape,\n        nullable: true\n    },\n\n    // Platform settings\n    platform_settings: {\n        _type: 'object' as const,\n        of: platformSettingsSchema.shape,\n        nullable: true\n    },\n\n    // Tags\n    tags: {\n        _type: 'array' as const,\n        of: tagModelSpec,\n        nullable: true,\n        optional: true\n    },\n\n    // Metadata\n    data: {\n        _type: 'object' as const,\n        of: partnerDataSchema.shape,\n        nullable: true,\n        optional: true\n    }\n});\n\n// ===== Price list schema =====\nexport const priceListSchemaSpec = markAsSchemaSpec({\n    // Base model fields\n    id: z.string(),\n    created_at: timestampRequired,\n    updated_at: timestampRequired,\n    created_by: z.string().nullable(),\n    updated_by: z.string().nullable(),\n\n    // Price list specific fields\n    name: z.string().min(3),\n    description: z.string().nullable(),\n    type: z.enum(['partner', 'consumer']),\n    partner: { _type: 'docRef' as const, collection: PARTNER_COLLECTION, nullable: true },\n    package_prices: {\n        _type: 'array' as const,\n        of: {\n            _type: 'object' as const,\n            of: {\n                destination: z.string(),\n                label: z.string(),\n                type: z.enum(['data-limited', 'time-limited']),\n                price: z.number(),\n                package: { _type: 'docRef' as const, collection: PACKAGE_COLLECTION }\n            }\n        }\n    }\n});\n","import { z } from 'zod';\nimport { timestampRequired } from './common';\nimport { markAsSchemaSpec } from '../common';\n\nexport const payloadSpec = {\n    _type: 'record' as const,\n    of: z.unknown(),\n    optional: true\n};\n\nexport const apiLogSchemaSpec = markAsSchemaSpec({\n    id: z.string().optional(),\n    method: z.string(),\n    user_id: z.string().optional(),\n    path: z.string(),\n    resource_type: z.string().optional(),\n    resource_id: z.string().optional(),\n    partner_id: z.string().optional(),\n    payload: payloadSpec,\n    timestamp: timestampRequired,\n    status_code: z.number()\n});\n","// firestoreTransformUtils.ts\n\nimport { z } from 'zod';\nimport { DocumentReference, Timestamp, Firestore } from 'firebase-admin/firestore';\nimport { FieldSpec } from '../types';\nimport { db as defaultDb } from '../services/firebase';\n\nexport function createConvertJSToFirestore(db: Firestore) {\n    return function convertJSToFirestore(input: any, spec: FieldSpec): any {\n        // Handle null/undefined at the top level\n        if (input === undefined || input === null) return null;\n\n        if (spec instanceof z.ZodType) {\n            if (input instanceof Date) return Timestamp.fromDate(input);\n            return input; // already valid\n        }\n\n        if ('_type' in spec) {\n            switch (spec._type) {\n                case 'timestamp':\n                    if (input instanceof Date) {\n                        return Timestamp.fromDate(input);\n                    } else if (typeof input === 'string' || typeof input === 'number') {\n                        return Timestamp.fromDate(new Date(input));\n                    }\n                    return input;\n                case 'docRef':\n                    return db.collection(spec.collection).doc(input);\n                case 'array':\n                    return input.map((item: any) => convertJSToFirestore(item, spec.of));\n                case 'record':\n                    // For records, filter out undefined values\n                    return Object.fromEntries(\n                        Object.entries(input)\n                            .filter(([_, v]) => v !== undefined)\n                            .map(([k, v]) => [k, convertJSToFirestore(v, spec.of)])\n                    );\n                case 'object':\n                    if ('of' in spec && typeof spec.of === 'object') {\n                        const result: any = {};\n                        for (const [key, fieldSpec] of Object.entries(spec.of)) {\n                            // Check if the field exists in the input\n                            if (key in input) {\n                                const value = input[key];\n\n                                // Handle based on field optionality and nullability\n                                if (value === undefined) {\n                                    // Check if field is optional by looking at its spec\n                                    const isOptional = typeof fieldSpec === 'object' && '_type' in fieldSpec && fieldSpec._type === 'optional';\n                                    if (!isOptional) {\n                                        // If not optional but nullable, convert to null\n                                        result[key] = null;\n                                    }\n                                    // If optional, just skip it (don't add to result)\n                                } else {\n                                    // Normal case - value exists and is not undefined\n                                    result[key] = convertJSToFirestore(value, fieldSpec);\n                                }\n                            }\n                        }\n                        return result;\n                    }\n                    return input;\n                default:\n                    throw new Error(`Unknown field type: ${spec._type}`);\n            }\n        }\n\n        // fallback: plain object shape with explicit schema\n        if (typeof input === 'object' && !Array.isArray(input) && typeof spec === 'object') {\n            const result: any = {};\n\n            for (const [key, fieldSpec] of Object.entries(spec)) {\n                if (key in input) {\n                    const value = input[key];\n\n                    // Handle undefined values\n                    if (value === undefined) {\n                        // Check if field is optional\n                        const isOptional = typeof fieldSpec === 'object' && '_type' in fieldSpec && fieldSpec._type === 'optional';\n                        if (!isOptional) {\n                            // If not optional but nullable, convert to null\n                            result[key] = null;\n                        }\n                        // If optional, don't include in the result\n                    } else {\n                        // Normal case - value exists\n                        result[key] = convertJSToFirestore(value, fieldSpec);\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        return input;\n    };\n}\n\nfunction isDuckTimestamp(obj: any): obj is { toDate: () => Date } {\n    return (\n        obj &&\n        typeof obj === 'object' &&\n        typeof obj.toDate === 'function' &&\n        Object.prototype.toString.call(obj.toDate()) === '[object Date]'\n    );\n}\n\nfunction isDuckDocumentRef(obj: any): obj is { id: string } {\n    return (\n        obj &&\n        typeof obj === 'object' &&\n        typeof obj.id === 'string' &&\n        typeof obj.path === 'string'\n    );\n}\n\nexport function createConvertFirestoreToJS() {\n    return function convertFirestoreToJS(input: any, spec: FieldSpec, path: string[] = []): any {\n        const pathString = path.join('.') || '<root>';\n\n        // ✅ Convert Firestore-native or duck-typed Timestamp\n        if (input instanceof Timestamp || isDuckTimestamp(input)) {\n            return input.toDate();\n        }\n\n        // ✅ Convert Firestore-native or duck-typed DocumentReference\n        if (input instanceof DocumentReference || isDuckDocumentRef(input)) {\n            return input.id;\n        }\n\n        if (input === null || input === undefined) return input;\n        if (!spec) return input;\n\n        if (spec instanceof z.ZodType) {\n            // 🔁 Keep in place if it's already a native value\n            return input;\n        }\n\n        if ('_type' in spec) {\n            switch (spec._type) {\n                case 'timestamp':\n                    return (input instanceof Timestamp || isDuckTimestamp(input)) ? input.toDate() : input;\n\n                case 'docRef':\n                    return (input instanceof DocumentReference || isDuckDocumentRef(input)) ? input.id : input;\n\n                case 'array':\n                    return Array.isArray(input)\n                        ? input.map((item, i) => convertFirestoreToJS(item, spec.of, [...path, `[${i}]`]))\n                        : input;\n\n                case 'record':\n                    if (typeof input !== 'object' || input === null) return input;\n                    return Object.fromEntries(\n                        Object.entries(input)\n                            .filter(([_, v]) => v !== undefined)\n                            .map(([k, v]) => [\n                                k,\n                                convertFirestoreToJS(v, spec.of, [...path, k]),\n                            ])\n                    );\n\n                case 'object':\n                    if (!spec.of || typeof spec.of !== 'object') return input;\n                    const result: Record<string, any> = {};\n                    for (const [key, fieldSpec] of Object.entries(spec.of)) {\n                        // Only include properties that exist in the input and aren't undefined\n                        if (key in input && input[key] !== undefined) {\n                            result[key] = convertFirestoreToJS(input[key], fieldSpec, [...path, key]);\n                        }\n                    }\n                    return result;\n            }\n        }\n\n        if (typeof spec === 'object' && typeof input === 'object' && !Array.isArray(input)) {\n            const result: Record<string, any> = {};\n            for (const [key, valSpec] of Object.entries(spec)) {\n                // Only include properties that exist in the input and aren't undefined\n                if (key in input && input[key] !== undefined) {\n                    result[key] = convertFirestoreToJS(input[key], valSpec, [...path, key]);\n                }\n            }\n            return result;\n        }\n\n        return input;\n    };\n}\n\n// For backward compatibility, export the default functions\nexport const convertJSToFirestore = createConvertJSToFirestore(defaultDb);\nexport const convertFirestoreToJS = createConvertFirestoreToJS();\n","import { z, ZodTypeAny } from 'zod';\nimport type { FieldSpec } from '../types';\nimport { wrapZodSchema, wrapObjectSchema, wrapPlainObjectSchema, isSchemaSpec } from '../common';\n\nexport function buildClientSchema(spec: FieldSpec, path: string[] = []): ZodTypeAny {\n  const pathString = path.join('.');\n\n  if (spec === undefined || spec === null) {\n    throw new Error(`Invalid schema spec at \"${pathString || '<root>'}\": received ${spec}`);\n  }\n\n  // ----- Zod passed directly -----\n  if (spec instanceof z.ZodType) {\n    return wrapZodSchema(spec);\n  }\n\n  // Check if object might be a Zod schema (has _def property or ~standard metadata)\n  if (typeof spec === 'object' && spec !== null &&\n    (('_def' in spec) || ('~standard' in spec && (spec as any)['~standard']?.vendor === 'zod'))) {\n    try {\n      // Try to use it as a Zod schema directly\n      return wrapZodSchema(spec as unknown as z.ZodTypeAny);\n    } catch (error) {\n      // If this fails, we'll continue with the other checks\n      console.warn(`Failed to use object as Zod schema at \"${pathString}\":`, error);\n    }\n  }\n\n  // ----- Array -----\n  if (typeof spec === 'object' && spec !== null && '_type' in spec && spec._type === 'array') {\n    if (!('of' in spec)) {\n      throw new Error(`Array spec at \"${pathString}\" is missing 'of'`);\n    }\n    let schema = z.array(buildClientSchema(spec.of, [...path, '[i]']));\n    if (spec.nullable) schema = schema.nullable() as any;\n    if (spec.optional) schema = schema.optional() as any;\n    return schema;\n  }\n\n  // ----- Record -----\n  if (typeof spec === 'object' && spec !== null && '_type' in spec && spec._type === 'record') {\n    if (!('of' in spec)) {\n      throw new Error(`Record spec at \"${pathString}\" is missing 'of'`);\n    }\n    let schema = z.record(buildClientSchema(spec.of, [...path, '[key]']));\n    if (spec.nullable) schema = schema.nullable() as any;\n    if (spec.optional) schema = schema.optional() as any;\n    return schema;\n  }\n\n  // ----- Timestamp -----\n  if (typeof spec === 'object' && spec !== null && '_type' in spec && spec._type === 'timestamp') {\n    let schema = z.preprocess((val) => {\n      if (typeof val === 'string') {\n        // Try to parse the string to a Date object\n        const date = new Date(val);\n        return isNaN(date.getTime()) ? undefined : date; // undefined will cause z.date() to fail\n      }\n      if (typeof val === 'number') {\n        // Handle numeric timestamps\n        const date = new Date(val);\n        return isNaN(date.getTime()) ? undefined : date;\n      }\n      // If it's already a Date or something else, return it as is\n      return val;\n    }, z.date({ required_error: 'Date is required', invalid_type_error: 'Invalid date format' }));\n    if (spec.nullable) schema = schema.nullable() as any;\n    if (spec.optional) schema = schema.optional() as any;\n    return schema;\n  }\n\n  // ----- DocRef -----\n  if (typeof spec === 'object' && spec !== null && '_type' in spec && spec._type === 'docRef') {\n    let schema = z.string(); // only ID on client\n    if (spec.nullable) schema = schema.nullable() as any;\n    if (spec.optional) schema = schema.optional() as any;\n    return schema;\n  }\n\n  // ----- Object (plain nested object spec) -----\n  if (\n    typeof spec === 'object' &&\n    spec !== null &&\n    '_type' in spec &&\n    spec._type === 'object' &&\n    'of' in spec\n  ) {\n    return wrapObjectSchema(spec, path, buildClientSchema);\n  }\n\n  // ----- Plain object shape -----\n  if (isSchemaSpec(spec) || (typeof spec === 'object' && spec !== null && '_type' in spec && (spec as any)._type === 'object')) {\n    return wrapPlainObjectSchema(spec, path, buildClientSchema);\n  }\n\n  // If we have an object with fields that look like schema specs, try to handle it as a schema object\n  if (typeof spec === 'object' && spec !== null) {\n    try {\n      return wrapPlainObjectSchema(spec, path, buildClientSchema);\n    } catch (error) {\n      // If this also fails, we'll throw the error below\n      console.warn(`Failed to handle object as plain schema at \"${pathString}\":`, error);\n    }\n  }\n\n  // 🔥 If we got here, the spec had a structure we didn't handle\n  throw new Error(`Unknown or malformed spec at \"${pathString}\": ${JSON.stringify(spec)}`);\n}\n\n","import { buildClientSchema } from './builders/client';\nimport {\n  userSchemaSpec,\n  apiKeySpec,\n  apiKeysSpec,\n  apiKeysObjectSpec\n} from './specs/user';\nimport {\n  bookingSchemaSpec,\n  communicationChannelSchema,\n  bookingStatusSchema,\n  communicationOptionsSchema\n} from './specs/booking';\nimport { SUPPORTED_LOCALES as LOCALES, hubbyModelSpec } from './specs/common';\nimport { countrySchemaSpec } from './specs/country';\nimport { currencySchemaSpec } from './specs/currency';\nimport { esimSchemaSpec } from './specs/esim';\nimport { paymentSchemaSpec } from './specs/payment';\nimport { messageSchemaSpec } from './specs/message';\nimport { packageSchemaSpec } from './specs/package';\nimport { promoCodeSchemaSpec, packageSpecificationSchema as promoPackageSpecificationSchema } from './specs/promocode';\nimport {\n  partnerSchemaSpec,\n  priceListSchemaSpec,\n  addressSchema,\n  registrationSchema,\n  bankingDetailsSchema,\n  packageSpecificationSchema as partnerPackageSpecificationSchema,\n  visualIdentityBannerSchema,\n  scheduleFilterSchema,\n  partnerContactSchema,\n  partnerDataSchema,\n  financialPropertiesSchemaSpec as financialPropertiesSchema,\n  packagePriceSchema,\n  platformSettingsSchema,\n  visualIdentitySchema,\n  pricingStrategySchema,\n  freeEsimSchema,\n} from './specs/partner';\nimport { analyticsSpec } from './specs/analytics';\nimport { apiLogSchemaSpec } from './specs/apiLogs';\nimport { z } from 'zod';\nexport const HUserSchema = buildClientSchema(userSchemaSpec);\nexport const HBookingSchema = buildClientSchema(bookingSchemaSpec);\nexport const HCountrySchema = buildClientSchema(countrySchemaSpec);\nexport const HCurrencySchema = buildClientSchema(currencySchemaSpec);\nexport const HESIMSchema = buildClientSchema(esimSchemaSpec);\nexport const HPaymentSchema = buildClientSchema(paymentSchemaSpec);\nexport const HMessageSchema = buildClientSchema(messageSchemaSpec);\nexport const HPackageSchema = buildClientSchema(packageSchemaSpec);\nexport const HPromoCodeSchema = buildClientSchema(promoCodeSchemaSpec);\nexport const HPartnerSchema = buildClientSchema(partnerSchemaSpec);\nexport const HPriceListSchema = buildClientSchema(priceListSchemaSpec);\nexport const HFinancialPropertiesSchema = buildClientSchema(financialPropertiesSchema);\nexport const HApiLogSchema = buildClientSchema(apiLogSchemaSpec);\nexport const HPackagePriceSchema = buildClientSchema(packagePriceSchema);\nexport const HubbyModelSchema = buildClientSchema(hubbyModelSpec);\nexport const HPartnerAppSchema = buildClientSchema(partnerSchemaSpec);\nexport const HPlatformSettingsSchema = buildClientSchema(platformSettingsSchema);\nexport const HVisualIdentitySchema = buildClientSchema(visualIdentitySchema);\nexport const HPricingStrategySchema = buildClientSchema(pricingStrategySchema);\nexport const HFreeEsimSchema = buildClientSchema(freeEsimSchema);\nexport const HAnalyticsSchema = buildClientSchema(analyticsSpec);\n// Additional lower-level schemas\nexport const HAddressSchema = addressSchema;\nexport const HRegistrationSchema = registrationSchema;\nexport const HBankingDetailsSchema = bankingDetailsSchema;\nexport const HPartnerPackageSpecificationSchema = partnerPackageSpecificationSchema;\nexport const HPromoPackageSpecificationSchema = promoPackageSpecificationSchema;\nexport const HVisualIdentityBannerSchema = visualIdentityBannerSchema;\nexport const HScheduleFilterSchema = scheduleFilterSchema;\nexport const HPartnerContactSchema = partnerContactSchema;\nexport const HPartnerDataSchema = partnerDataSchema;\nexport const HCommunicationChannelSchema = communicationChannelSchema;\nexport const HBookingStatusSchema = bookingStatusSchema;\nexport const HCommunicationOptionsSchema = communicationOptionsSchema;\n\n\nexport type HAnalytics = z.infer<typeof HAnalyticsSchema>;\nexport type HUser = z.infer<typeof HUserSchema>;\nexport type HBooking = z.infer<typeof HBookingSchema>;\nexport type HCountry = z.infer<typeof HCountrySchema>;\nexport type HCurrency = z.infer<typeof HCurrencySchema>;\nexport type HESIM = z.infer<typeof HESIMSchema>;\nexport type HPayment = z.infer<typeof HPaymentSchema>;\nexport type HMessage = z.infer<typeof HMessageSchema>;\nexport type HPackage = z.infer<typeof HPackageSchema>;\nexport type HPromoCode = z.infer<typeof HPromoCodeSchema>;\nexport type HPartner = z.infer<typeof HPartnerSchema>;\nexport type HPriceList = z.infer<typeof HPriceListSchema>;\nexport type HApiLog = z.infer<typeof HApiLogSchema>;\n\n// Additional lower-level types\nexport type HAddress = z.infer<typeof HAddressSchema>;\nexport type HRegistration = z.infer<typeof HRegistrationSchema>;\nexport type HBankingDetails = z.infer<typeof HBankingDetailsSchema>;\nexport type HPartnerPackageSpecification = z.infer<typeof HPartnerPackageSpecificationSchema>;\nexport type HPromoPackageSpecification = z.infer<typeof HPromoPackageSpecificationSchema>;\nexport type HVisualIdentityBanner = z.infer<typeof HVisualIdentityBannerSchema>;\nexport type HFinancialProperties = z.infer<typeof HFinancialPropertiesSchema>;\nexport type HScheduleFilter = z.infer<typeof HScheduleFilterSchema>;\nexport type HPartnerContact = z.infer<typeof HPartnerContactSchema>;\nexport type HPartnerData = z.infer<typeof HPartnerDataSchema>;\nexport type HCommunicationChannel = z.infer<typeof HCommunicationChannelSchema>;\nexport type HBookingStatus = z.infer<typeof HBookingStatusSchema>;\nexport type HCommunicationOptions = z.infer<typeof HCommunicationOptionsSchema>;\nexport type HHubbyModel = z.infer<typeof HubbyModelSchema>;\n\nexport type HubbyModelApp = HHubbyModel;\n\nexport type SupportedLocales = typeof SUPPORTED_LOCALES[number];\nexport const SUPPORTED_LOCALES = LOCALES; \n","import { Firestore } from 'firebase-admin/firestore';\nimport {\n  createConvertJSToFirestore,\n  createConvertFirestoreToJS\n} from './firestoreTransformUtils';\nimport { FieldSpec } from '../types';\n\n/**\n * Creates converter functions for a specific model type with dependency injection.\n * This lets you use the conversion functions with your own Firebase instance.\n * \n * @param db - Firestore instance to use for document references\n * @param modelSchemaSpec - Schema specification for the model\n * @returns Object with to/from Firestore conversion functions\n */\nexport function createModelConverters<TModel, TFirestore>(\n  db: Firestore,\n  modelSchemaSpec: FieldSpec\n) {\n  const convertToFirestore = createConvertJSToFirestore(db);\n  const convertFromFirestore = createConvertFirestoreToJS();\n\n  return {\n    /**\n     * Converts a model instance to Firestore format\n     */\n    toFirestore: (model: TModel): TFirestore => {\n      return convertToFirestore(model, modelSchemaSpec);\n    },\n\n    /**\n     * Converts Firestore data to a model instance\n     */\n    fromFirestore: (firestoreData: TFirestore): TModel => {\n      return convertFromFirestore(firestoreData, modelSchemaSpec);\n    }\n  };\n} ","import { buildServerSchema } from './builders/server';\nimport {\n    userSchemaSpec,\n} from './specs/user';\nimport {\n    bookingSchemaSpec,\n    communicationChannelSchema,\n    bookingStatusSchema,\n    communicationOptionsSchema\n} from './specs/booking';\nimport { countrySchemaSpec } from './specs/country';\nimport { currencySchemaSpec } from './specs/currency';\nimport { esimSchemaSpec } from './specs/esim';\nimport { paymentSchemaSpec } from './specs/payment';\nimport { analyticsSpec } from './specs/analytics';\nimport { messageSchemaSpec } from './specs/message';\nimport { packageSchemaSpec } from './specs/package';\nimport { promoCodeSchemaSpec, packageSpecificationSchema as promoPackageSpecificationSchema } from './specs/promocode';\nimport {\n    partnerSchemaSpec,\n    priceListSchemaSpec,\n    addressSchema,\n    registrationSchema,\n    bankingDetailsSchema,\n    packageSpecificationSchema as partnerPackageSpecificationSchema,\n    visualIdentityBannerSchema,\n    visualIdentityBannersSchema,\n    scheduleFilterSchema,\n    partnerContactSchema,\n    partnerDataSchema,\n    scheduleSchema,\n    visualIdentitySchema,\n    packagePriceSchemaSpec,\n    platformSettingsSchemaSpec\n} from './specs/partner';\nimport { hubbyModelSpec } from './specs/common';\nimport { SUPPORTED_LOCALES as LOCALES } from './specs/common';\nimport { apiLogSchemaSpec } from './specs/apiLogs';\nimport { z } from 'zod';\nimport { DocumentReference, Timestamp } from 'firebase-admin/firestore';\n\n\nimport { convertFirestoreToJS, convertJSToFirestore } from './utils/firestoreTransformUtils';\nimport { HPartner, HPriceList, HPromoCode } from './index.client';\nimport { buildClientSchema } from './builders/client';\n\n\nexport { partnerSchemaSpec, analyticsSpec };\n\n\nexport const UserSchema = buildServerSchema(userSchemaSpec);\nexport const UserFirestoreSchema = buildServerSchema(userSchemaSpec);\nexport const BookingSchema = buildServerSchema(bookingSchemaSpec);\nexport const CountrySchema = buildServerSchema(countrySchemaSpec);\nexport const CurrencySchema = buildServerSchema(currencySchemaSpec);\nexport const ESIMSchema = buildServerSchema(esimSchemaSpec);\nexport const PaymentSchema = buildServerSchema(paymentSchemaSpec);\nexport const MessageSchema = buildServerSchema(messageSchemaSpec);\nexport const PackageSchema = buildServerSchema(packageSchemaSpec);\nexport const PromoCodeSchema = buildServerSchema(promoCodeSchemaSpec);\nexport const PartnerSchema = buildServerSchema(partnerSchemaSpec);\nexport const PriceListSchema = buildServerSchema(priceListSchemaSpec);\nexport const ApiLogSchema = buildServerSchema(apiLogSchemaSpec);\nexport const HubbyModelSchema = buildServerSchema(hubbyModelSpec);\nexport const VisualIdentitySchema = buildServerSchema(visualIdentitySchema);\nexport const PackagePriceSchema = buildServerSchema(packagePriceSchemaSpec);\nexport const PlatformSettingsSchema = buildServerSchema(platformSettingsSchemaSpec);\nexport const ScheduleSchema = buildServerSchema(scheduleSchema);\nexport const AnalyticsSchema = buildServerSchema(analyticsSpec);\n// Additional lower-level schemas\nexport const AddressSchema = addressSchema;\nexport const RegistrationSchema = registrationSchema;\nexport const BankingDetailsSchema = bankingDetailsSchema;\nexport const PartnerPackageSpecificationSchema = partnerPackageSpecificationSchema;\nexport const PromoPackageSpecificationSchema = promoPackageSpecificationSchema;\nexport const VisualIdentityBannerSchema = visualIdentityBannerSchema;\nexport const ScheduleFilterSchema = scheduleFilterSchema;\nexport const PartnerContactSchema = partnerContactSchema;\nexport const PartnerDataSchema = partnerDataSchema;\nexport const CommunicationChannelSchema = communicationChannelSchema;\nexport const BookingStatusSchema = bookingStatusSchema;\nexport const CommunicationOptionsSchema = communicationOptionsSchema;\nexport const VisualIdentityBannersSchema = visualIdentityBannersSchema;\n\nexport type User = z.infer<typeof UserSchema>;\nexport type UserFirestore = z.infer<typeof UserFirestoreSchema>;\nexport type Booking = z.infer<typeof BookingSchema>;\nexport type Country = z.infer<typeof CountrySchema>;\nexport type Currency = z.infer<typeof CurrencySchema>;\nexport type ESIM = z.infer<typeof ESIMSchema>;\nexport type Payment = z.infer<typeof PaymentSchema>;\nexport type Message = z.infer<typeof MessageSchema>;\nexport type Package = z.infer<typeof PackageSchema>;\nexport type PromoCode = z.infer<typeof PromoCodeSchema>;\nexport type Partner = z.infer<typeof PartnerSchema>;\nexport type PriceList = z.infer<typeof PriceListSchema>;\nexport type ApiLog = z.infer<typeof ApiLogSchema>;\nexport type Analytics = z.infer<typeof AnalyticsSchema>;\nexport type Schedule = z.infer<typeof ScheduleSchema>;\n// Additional lower-level types\nexport type Address = z.infer<typeof AddressSchema>;\nexport type Registration = z.infer<typeof RegistrationSchema>;\nexport type BankingDetails = z.infer<typeof BankingDetailsSchema>;\nexport type PartnerPackageSpecification = z.infer<typeof PartnerPackageSpecificationSchema>;\nexport type PackageSpecification = z.infer<typeof PromoPackageSpecificationSchema>;\nexport type VisualIdentity = z.infer<typeof VisualIdentitySchema>;\nexport type VisualIdentityBanner = z.infer<typeof VisualIdentityBannerSchema>;\nexport type VisualIdentityBanners = z.infer<typeof VisualIdentityBannersSchema>;\nexport type VisualIdentityBannerStrategy = VisualIdentityBanners;\nexport type ScheduleFilter = z.infer<typeof ScheduleFilterSchema>;\nexport type PartnerContact = z.infer<typeof PartnerContactSchema>;\nexport type PartnerData = z.infer<typeof PartnerDataSchema>;\nexport type CommunicationChannel = z.infer<typeof CommunicationChannelSchema>;\nexport type BookingStatus = z.infer<typeof BookingStatusSchema>;\nexport type CommunicationOptions = z.infer<typeof CommunicationOptionsSchema>;\nexport type PackagePrice = z.infer<typeof PackagePriceSchema>;\nexport type PlatformSettings = z.infer<typeof PlatformSettingsSchema>;\nexport type BookingApiRequest = Booking;\nexport type BookingApiResponse = Booking;\nexport type PartnerApiRequest = Partner;\nexport type PartnerApiResponse = Partner;\nexport type PriceListApiRequest = PriceList;\nexport type PriceListApiResponse = PriceList;\nexport type ApiLogApiRequest = ApiLog;\nexport type ApiLogApiResponse = ApiLog;\n\nexport * from './index.client';\n\nexport type HubbyModel = {\n    id: string;\n    created_at: Date;\n    updated_at: Date | null;\n    created_by: string;\n    updated_by: string | null;\n}\n\nexport type HubbyModelFirestore = {\n    id: string;\n    created_at: Timestamp;\n    updated_at: Timestamp | null;\n    created_by: DocumentReference | null | string;\n    updated_by: DocumentReference | null | string;\n}\n\nexport const partnerFromFirestore = (partner: Partner): HPartner => {\n    return convertFirestoreToJS(partner, partnerSchemaSpec);\n}\n\nexport const partnerToFirestore = (partner: HPartner): Partner => {\n    return convertJSToFirestore(partner, partnerSchemaSpec);\n}\n\nexport const userToFirestore = (user: User): UserFirestore => {\n    return convertJSToFirestore(user, userSchemaSpec);\n}\n\nexport const userFromFirestore = (user: UserFirestore): User => {\n    return convertFirestoreToJS(user, userSchemaSpec);\n}\n\nexport const priceListFromFirestore = (priceList: PriceList): HPriceList => {\n    return convertFirestoreToJS(priceList, priceListSchemaSpec);\n}\n\nexport const priceListToFirestore = (priceList: HPriceList): PriceList => {\n    return convertJSToFirestore(priceList, priceListSchemaSpec);\n}\n\nexport const promoCodeFromFirestore = (promoCode: PromoCode): HPromoCode => {\n    return convertFirestoreToJS(promoCode, promoCodeSchemaSpec);\n}\n\nexport const promoCodeToFirestore = (promoCode: HPromoCode): PromoCode => {\n    return convertJSToFirestore(promoCode, promoCodeSchemaSpec);\n}\n\nexport const partnerAppSchema = buildClientSchema(partnerSchemaSpec);\n// Export the type and constant\nexport type SupportedLocales = typeof LOCALES[number];\nexport const SUPPORTED_LOCALES = LOCALES;\n\n// Dependency Injection exports\nexport { createModelConverters } from './utils/modelConverterFactory';\nexport { createConvertJSToFirestore, createConvertFirestoreToJS } from './utils/firestoreTransformUtils';\nexport { FirebaseService, createFirebaseService } from './services/firebase';"]}